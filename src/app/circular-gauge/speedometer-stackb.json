{"main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/guide/browser-support\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/**\n * IE11 requires the following for NgClass support on SVG elements\n */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n */\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n * because those flags need to be set before `zone.js` being loaded, and webpack\n * will put import in the top of bundle, so user need to create a separate file\n * in this directory (for example: zone-flags.ts), and put the following flags\n * into that file, and then add the following code before importing zone.js.\n * import './zone-flags';\n *\n * The flags allowed in zone-flags.ts are listed here.\n *\n * The following flags will work for all browsers.\n *\n * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n *\n *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n *  with the following flag, it will bypass `zone.js` patch for IE/Edge\n *\n *  (window as any).__Zone_enable_cross_context_check = true;\n *\n */\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n  <link href=\"../../styles/material.css\" rel=\"stylesheet\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\"/>\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app.component.ts":"/**\n * Sample to design speedometer using the Circular Gauge\n */\nimport { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { CircularGaugeComponent, ILoadedEventArgs, GaugeTheme, IAxisLabelRenderEventArgs, CircularGauge } from '@syncfusion/ej2-angular-circulargauge';\nimport { CheckBox, ChangeEventArgs as CheckBoxChangeEvents } from '@syncfusion/ej2-buttons';\nimport { EmitType, isNullOrUndefined } from '@syncfusion/ej2-base';\n\n// custom code start\n// tslint:disable\n// custom code end\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    encapsulation: ViewEncapsulation.None\n})\n\nexport class AppComponent {\n\n    @ViewChild('circulargauge')\n    public circulargauge: CircularGaugeComponent;\n\n    public title: string = 'Speedometer';\n    public titleStyle: Object = { size: '18px', fontFamily: 'inherit' };\n    public pointerInterval: Object;\n    public pointerValue: number = 40;\n\n    public lineStyle: Object = {\n        width: 0\n    };\n\n    public labelStyle: Object = {\n        position: 'Outside', autoAngle: true,\n        font: { size: '13px', fontFamily: 'inherit' }\n    };\n\n    public majorTicks: Object = {\n        width: 0\n    };\n\n    public minorTicks: Object = {\n        width: 0\n    };\n\n    public pointers: Object[] = [{\n        animation: { enable: false },\n        value: 40,\n        radius: '80%',\n        color: '#757575',\n        pointerWidth: 7,\n        cap: {\n            radius: 8,\n            color: '#757575',\n            border: { width: 0 }\n        },\n        needleTail: {\n            color: '#757575',\n            length: '15%'\n        },\n    }];\n\n    public annotaions: Object = [{\n        content: \"<div id='templateWrap'>\"\n            + \"<div style='width:90px;text-align:center;float: right;font-size: 20px;font-family:inherit'>${pointers[0].value} km/h</div></div></div>\",\n        angle: 0, zIndex: '1',\n        radius: '30%'\n    }];\n\n    public ranges: Object[] = [\n        {\n            start: 0,\n            end: 20,\n            startWidth: 5, endWidth: 10,\n            radius: '102%',\n            color: '#82b944',\n        },\n        {\n            start: 20,\n            end: 40,\n            startWidth: 10, endWidth: 15,\n            radius: '102%',\n            color: '#a1cb43',\n        }, {\n            start: 40,\n            end: 60,\n            startWidth: 15, endWidth: 20,\n            radius: '102%',\n            color: '#ddec12',\n        },\n        {\n            start: 60,\n            end: 80,\n            startWidth: 20, endWidth: 25,\n            radius: '102%',\n            color: '#ffbc00',\n        },\n        {\n            start: 80,\n            end: 100,\n            startWidth: 25, endWidth: 30,\n            radius: '102%',\n            color: '#ff6000',\n        },\n        {\n            start: 100,\n            end: 120,\n            startWidth: 30, endWidth: 35,\n            radius: '102%',\n            color: 'red',\n        }\n    ];\n\n    public loaded(args: ILoadedEventArgs): void {\n        this.pointerInterval = setInterval(\n            (): void => {\n                if (document.getElementById('container')) {\n                    this.pointerValue = Math.abs(this.pointerValue + ((Math.random() * 20) - 10));\n                    if (this.circulargauge) {\n                        this.circulargauge.setPointerValue(0, 0, this.pointerValue);\n                        this.circulargauge.setAnnotationValue(0, 0, '<div style=\"width:90px;text-align:center;font-size:20px;font-family:inherit\">' + Math.round(this.pointerValue).toString() + 'km/h' + '</div>');\n                    }\n                } else {\n                    clearInterval(+this.pointerInterval);\n                }\n            }, 2000)\n    }\n\n    public load(args: ILoadedEventArgs): void {\n        // custom code start\n        let selectedTheme: string = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Material';\n        args.gauge.theme = <GaugeTheme>(selectedTheme.charAt(0).toUpperCase() +\n            selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast');\n        // custom code end\n    }\n\n    ngAfterViewInit(): void {\n\n        let combineRange: EmitType<CheckBoxChangeEvents>;        \n        let range: EmitType<CheckBoxChangeEvents>;\n\n        let gaugeInterval: any = setInterval(\n            (): void => {\n                let newVal: number = Math.abs(this.circulargauge.axes[0].pointers[0].value + (Math.floor(Math.random() * 20) - 10));\n                if (newVal <= 0) {\n                    newVal = 5;\n                }\n                if (document.getElementById('container') && this.circulargauge) {\n                    this.circulargauge.setPointerValue(0, 0, newVal);\n                    if (!isNullOrUndefined(document.getElementById('pointerannotation'))) {\n                        document.getElementById('pointerannotation').innerHTML = newVal.toString() + ' km/h';\n                    }\n                } else {\n                    clearInterval(gaugeInterval);\n                }\n            }, 1000);\n\n        let rangeSet: CheckBox = new CheckBox(\n            {\n                change: combineRange, checked: false\n            }, '#combineRange');\n\n        let showCheckBox: CheckBox = new CheckBox(\n            {\n                change: range, checked: false\n            }, '#range');\n\n        rangeSet.change = combineRange = (e: CheckBoxChangeEvents) => {\n            let element: HTMLInputElement = document.getElementById('range') as HTMLInputElement;\n            if (e.checked === true) {\n                showCheckBox.disabled = true;\n                this.circulargauge.axes[0].ranges[0].start = 0;\n                this.circulargauge.axes[0].ranges[0].end = 120;\n                this.circulargauge.axes[0].ranges[0].startWidth = 5;\n                this.circulargauge.axes[0].ranges[0].endWidth = 35;\n                this.circulargauge.axes[0].ranges[0].color = 'url(#grad1)';\n                this.circulargauge.axes[0].ranges[1].start = null;\n                this.circulargauge.axes[0].ranges[1].end = null;\n                this.circulargauge.axes[0].ranges[1].startWidth = '';\n                this.circulargauge.axes[0].ranges[1].endWidth = '';\n                this.circulargauge.axes[0].ranges[1].color = '';\n                this.circulargauge.axes[0].ranges[2].start = null;\n                this.circulargauge.axes[0].ranges[2].end = null;\n                this.circulargauge.axes[0].ranges[2].startWidth = '';\n                this.circulargauge.axes[0].ranges[2].endWidth = '';\n                this.circulargauge.axes[0].ranges[2].color = '';\n                this.circulargauge.axes[0].ranges[3].start = null;\n                this.circulargauge.axes[0].ranges[3].end = null;\n                this.circulargauge.axes[0].ranges[3].startWidth = '';\n                this.circulargauge.axes[0].ranges[3].endWidth = '';\n                this.circulargauge.axes[0].ranges[3].color = '';\n                this.circulargauge.axes[0].ranges[4].start = null;\n                this.circulargauge.axes[0].ranges[4].end = null;\n                this.circulargauge.axes[0].ranges[4].startWidth = '';\n                this.circulargauge.axes[0].ranges[4].endWidth = '';\n                this.circulargauge.axes[0].ranges[4].color = '';\n                this.circulargauge.axes[0].ranges[5].start = null;\n                this.circulargauge.axes[0].ranges[5].end = null;\n                this.circulargauge.axes[0].ranges[5].startWidth = '';\n                this.circulargauge.axes[0].ranges[5].endWidth = '';\n                this.circulargauge.axes[0].ranges[5].color = '';\n                this.circulargauge.refresh();\n            } else {\n                showCheckBox.disabled = false;\n                this.circulargauge.axes[0].ranges[0].start = 0;\n                this.circulargauge.axes[0].ranges[0].end = 20;\n                this.circulargauge.axes[0].ranges[0].startWidth = 5;\n                this.circulargauge.axes[0].ranges[0].endWidth = 10;\n                this.circulargauge.axes[0].ranges[0].color = '#82b944';\n                this.circulargauge.axes[0].ranges[1].start = 20;\n                this.circulargauge.axes[0].ranges[1].end = 40;\n                this.circulargauge.axes[0].ranges[1].startWidth = 10;\n                this.circulargauge.axes[0].ranges[1].endWidth = 15;\n                this.circulargauge.axes[0].ranges[1].color = '#a1cb43';\n                this.circulargauge.axes[0].ranges[2].start = 40;\n                this.circulargauge.axes[0].ranges[2].end = 60;\n                this.circulargauge.axes[0].ranges[2].startWidth = 15;\n                this.circulargauge.axes[0].ranges[2].endWidth = 20;\n                this.circulargauge.axes[0].ranges[2].color = '#ddec12';\n                this.circulargauge.axes[0].ranges[3].start = 60;\n                this.circulargauge.axes[0].ranges[3].end = 80;\n                this.circulargauge.axes[0].ranges[3].startWidth = 20;\n                this.circulargauge.axes[0].ranges[3].endWidth = 25;\n                this.circulargauge.axes[0].ranges[3].color = '#ffbc00';\n                this.circulargauge.axes[0].ranges[4].start = 80;\n                this.circulargauge.axes[0].ranges[4].end = 100;\n                this.circulargauge.axes[0].ranges[4].startWidth = 25;\n                this.circulargauge.axes[0].ranges[4].endWidth = 30;\n                this.circulargauge.axes[0].ranges[4].color = '#ff6000';\n                this.circulargauge.axes[0].ranges[5].start = 100;\n                this.circulargauge.axes[0].ranges[5].end = 120;\n                this.circulargauge.axes[0].ranges[5].startWidth = 30;\n                this.circulargauge.axes[0].ranges[5].endWidth = 35;\n                this.circulargauge.axes[0].ranges[5].color = 'red';\n                this.circulargauge.refresh();\n            }\n        };\n\n        showCheckBox.change = range = (e: CheckBoxChangeEvents) => {\n            if (e.checked) {\n                this.circulargauge.axes[0].rangeGap = 5;\n            } else {\n                this.circulargauge.axes[0].rangeGap = null;\n            }\n            this.circulargauge.refresh();\n        };\n\n    }\n\n    constructor() {\n        // code\n    };\n}","app/app.module.ts":"import { ButtonModule, CheckBoxModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { GridModule } from '@syncfusion/ej2-angular-grids';\n\nimport { CircularGaugeAllModule } from '@syncfusion/ej2-angular-circulargauge';\n\nimport { HttpModule } from '@angular/http';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { RouterModule } from '@angular/router';\n\nimport { CommonModule } from '@angular/common';\n\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from '../app.component';\n@NgModule({ declarations: [ AppComponent ], imports: [ CircularGaugeAllModule, GridModule, ButtonModule, CheckBoxModule, BrowserModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"<div class=\"col-md-8 control-section\">\n    <ejs-circulargauge (load)='load($event)' background='transparent' (loaded)='loaded($event)' style='display:block;'\n        id='container' centerY='75%' title='Speedometer' [titleStyle]='titleStyle' #circulargauge=''>\n        <e-axes>\n            <e-axis minimum=0 radius='120%' maximum=120 startAngle=270 endAngle=90 rangeGap=0 [majorTicks]='majorTicks'\n                [labelStyle]='labelStyle' [lineStyle]='lineStyle' [minorTicks]='minorTicks' [annotations]='annotaions'\n                [ranges]='ranges' [pointers]='pointers'>\n            </e-axis>\n        </e-axes>\n    </ejs-circulargauge>\n</div>\n<div class=\"col-md-4 property-section\">\n    <div class=\"property-panel-section\">\n        <div class=\"property-panel-header\">Properties</div>\n        <table id=\"property\" title=\"Properties\" style=\"width: 100%;margin-top: 10px;\">\n            <tbody>\n                <tr style=\"height: 27px\">\n                    <td style=\"width: 60%; font-size: 14px;\">\n                        <div> Combine Ranges</div>\n                    </td>\n                    <td>\n                        <div>\n                            <input type=\"checkbox\" id=\"combineRange\" checked />\n                        </div>\n                    </td>\n                </tr>\n                <br />\n                <tr style=\"height:21px\">\n                    <td style=\"width: 60%; font-size: 14px;\">\n                        <div> Gap Between Ranges</div>\n                    </td>\n                    <td>\n                        <div>\n                            <input type=\"checkbox\" id=\"range\" checked />\n                        </div>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>\n<script id='pointerValue' type=\"text/x-template\">\n        <div id='templateWrap'>\n            <div class='des'>\n                <div id='pointerannotation' style=\"width:90px;text-align:center;font-size:20px;font-family:Roboto\">${pointers[0].value} km/h</div>\n            </div>\n        </div>\n    </script>\n<svg style=\"height:0px;width:0px\">\n    <defs>\n        <linearGradient id=\"grad1\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n            <stop offset=\"0%\" style=\"stop-color:#82b944;stop-opacity:1\" />\n            <stop offset=\"50%\" style=\"stop-color:rgb(255,255,0);stop-opacity:1\" />\n            <stop offset=\"100%\" style=\"stop-color:red;stop-opacity:1\" />\n        </linearGradient>\n    </defs>\n</svg>","app.component.css":"","dependencies.json":"{\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-grids\":\"*\",\"@syncfusion/ej2-angular-grids\":\"*\",\"@syncfusion/ej2-circulargauge\":\"*\",\"@syncfusion/ej2-angular-circulargauge\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\"}"}