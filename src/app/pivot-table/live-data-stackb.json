{"main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/guide/browser-support\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n */\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n * because those flags need to be set before `zone.js` being loaded, and webpack\n * will put import in the top of bundle, so user need to create a separate file\n * in this directory (for example: zone-flags.ts), and put the following flags\n * into that file, and then add the following code before importing zone.js.\n * import './zone-flags';\n *\n * The flags allowed in zone-flags.ts are listed here.\n *\n * The following flags will work for all browsers.\n *\n * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n *\n *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n *  with the following flag, it will bypass `zone.js` patch for IE/Edge\n *\n *  (window as any).__Zone_enable_cross_context_check = true;\n *\n */\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n  <link href=\"../../styles/material.css\" rel=\"stylesheet\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\"/>\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app.component.ts":"import { Component, ViewEncapsulation, OnInit, ViewChild } from '@angular/core';\nimport { IDataOptions, IDataSet, PivotView, DisplayOption, PivotChartService, QueryCellInfoEventArgs } from '@syncfusion/ej2-angular-pivotview';\nimport { ButtonComponent } from '@syncfusion/ej2-angular-buttons';\nimport { NumericTextBoxComponent } from '@syncfusion/ej2-angular-inputs';\nimport { ChartSettings } from '@syncfusion/ej2-pivotview/src/pivotview/model/chartsettings';\nimport { GridSettings } from '@syncfusion/ej2-pivotview/src/pivotview/model/gridsettings';\nimport { enableRipple } from '@syncfusion/ej2-base';\nimport { Observable } from 'rxjs';\nimport { ILoadedEventArgs, ChartTheme } from '@syncfusion/ej2-charts';\nenableRipple(false);\n\n/**\n * Pivot Table LiveData Sample.\n */\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['app.component.css'],\n    providers: [PivotChartService]\n})\n\nexport class AppComponent {\n    public observable = new Observable();\n    public chartSettings: ChartSettings;\n    public displayOption: DisplayOption;\n    public dataSourceSettings: IDataOptions;\n    public gridSettings: GridSettings;\n    public colourScheme: string[] = ['bg-fade', 'bg-fade1', 'bg-fade2'];\n    public timerID: any;\n    public initial: boolean = true;\n    public previousPivotValues: any;\n    public REGIONS: any = [\n        {\n            \"Region\": \"North America\",\n            \"Countries\": [\"Canada\", \"United States\", \"Mexico\"]\n        },\n        {\n            \"Region\": \"Middle East\",\n            \"Countries\": [\"Turkey\", \"Saudi Arabia\"]\n        },\n        {\n            \"Region\": \"Europe\",\n            \"Countries\": [\"Russia\", \"Germany\", \"France\", \"United Kingdom\", \"Italy\"]\n        },\n        {\n            \"Region\": \"Africa\",\n            \"Countries\": [\"South Africa\"]\n        },\n        {\n            \"Region\": \"Asia Pacific\",\n            \"Countries\": [\"Australia\", \"China\", \"India\", \"Indonesia\",\n                \"Japan\", \"South Korea\"]\n        },\n        {\n            \"Region\": \"South America\",\n            \"Countries\": [\"Brazil\"]\n        }\n    ];\n    public DATA: IDataSet[] = [\n        {\n            \"Category\": \"Agriculture\",\n            \"Type\": \"Corn\",\n            \"Spread\": 0.01,\n            \"Open Price\": 379.50,\n            \"Price\": 379.8026,\n            \"Buy\": 379.7976,\n            \"Sell\": 379.8076,\n            \"Change\": 0.3026,\n            \"Change(%)\": 0.0797,\n            \"Volume\": 11266\n        },\n        {\n            \"Category\": \"Agriculture\",\n            \"Type\": \"Rice\",\n            \"Spread\": 0.01,\n            \"Open Price\": 11.245,\n            \"Price\": 10.4154,\n            \"Buy\": 10.4104,\n            \"Sell\": 10.4204,\n            \"Change\": -0.8296,\n            \"Change(%)\": -7.3779,\n            \"Volume\": 220\n        },\n        {\n            \"Category\": \"Agriculture\",\n            \"Type\": \"Wheat\",\n            \"Spread\": 0.01,\n            \"Open Price\": 465.50,\n            \"Price\": 465.52,\n            \"Buy\": 465.50,\n            \"Sell\": 465.50,\n            \"Change\": 0.02,\n            \"Change(%)\": 0.0043,\n            \"Volume\": 4318\n        },\n        {\n            \"Category\": \"Agriculture\",\n            \"Type\": \"Soybean\",\n            \"Spread\": 0.01,\n            \"Open Price\": 1038.00,\n            \"Price\": 1038.6171,\n            \"Buy\": 1038.6121,\n            \"Sell\": 1038.6221,\n            \"Change\": 0.6171,\n            \"Change(%)\": 0.0595,\n            \"Volume\": 20356\n        },\n        {\n            \"Category\": \"Agriculture\",\n            \"Type\": \"Coffee\",\n            \"Spread\": 0.01,\n            \"Open Price\": 125.70,\n            \"Price\": 125.69,\n            \"Buy\": 125.70,\n            \"Sell\": 125.70,\n            \"Change\": -0.01,\n            \"Change(%)\": -0.008,\n            \"Volume\": 1654\n        },\n        {\n            \"Category\": \"Agriculture\",\n            \"Type\": \"Cocoa\",\n            \"Spread\": 0.01,\n            \"Open Price\": 307.00,\n            \"Price\": 307.03,\n            \"Buy\": 307.00,\n            \"Sell\": 307.00,\n            \"Change\": 0.03,\n            \"Change(%)\": 0.001,\n            \"Volume\": 978\n        },\n    ]\n\n    @ViewChild('pivotview')\n    public pivotObj: PivotView;\n\n    @ViewChild('update')\n    public updateButton: ButtonComponent;\n    @ViewChild('clear')\n    public clearButton: ButtonComponent;\n    @ViewChild('feeddelay')\n    public feedDelayInput: NumericTextBoxComponent;\n\n    destroyClear(_args: any): void {\n        if (this.timerID) {\n            clearInterval(this.timerID);\n            this.timerID = undefined;\n        }\n    }\n\n    generateData(): any {\n        const count: number = 1000;\n        const currData: Object[] = [];\n        let j: number = 0;\n        for (let i: number = 0; i < count; i++) {\n            const rand: number = Math.floor(Math.random() * Math.floor(this.DATA.length));\n            const region = this.REGIONS[j];\n            for (let k = 0; k < region.Countries.length; k++) {\n                const data = Object.assign({}, this.DATA[rand]);\n                const dataObj = {\n                    ...data,\n                    Region: region.Region,\n                    Country: region.Countries[k]\n                };\n                this.randomizeObjectData(dataObj);\n                currData.push(dataObj);\n            }\n            j++;\n            j = j > 5 ? 0 : j;\n        }\n        return currData;\n    }\n\n    randomizeObjectData(dataObj: any): any {\n        const changeP = \"Change(%)\";\n        const res: any = this.generateNewPrice(dataObj.Price, dataObj.Volume);\n        dataObj.Change = res.Price - dataObj.Price;\n        dataObj.Price = res.Price;\n        dataObj[changeP] = res.ChangePercent;\n        dataObj.Volume = res.Volume;\n    }\n\n    generateNewPrice(oldPrice: any, oldVolume: any): any {\n        let rnd: number = Math.random();\n        rnd = Math.round(rnd * 100) / 100;\n        const volatility: number = 15;\n        let newPrice: number = 0;\n        let newVolume: number = 0;\n        let changePercent: number = 2 * volatility * rnd;\n        if (changePercent > volatility) {\n            changePercent -= (2 * volatility);\n        }\n        let changeVolumnPercent: number = 2 * (volatility - 5) * rnd;\n        if (changeVolumnPercent > (volatility - 5)) {\n            changeVolumnPercent -= (2 * (volatility - 5));\n        }\n        let changeAmount: number = oldPrice * (changePercent / 100);\n        newPrice = oldPrice + changeAmount;\n        let changeVolume: number = oldVolume * (changeVolumnPercent / 100);\n        newVolume = oldVolume + changeVolume;\n        newPrice = Math.round(newPrice * 100) / 100;\n        newVolume = Math.round((newVolume * 100) / 100);\n        const result = { Price: 0, ChangePercent: 0, Volume: 0 };\n        changePercent = Math.round(changePercent * 100) / 100;\n        result.Price = newPrice;\n        result.ChangePercent = changePercent;\n        result.Volume = newVolume;\n        return result;\n    };\n\n    updateCellValues(): void {\n        if (this.pivotObj.pivotValues.length > 0) {\n            if (!this.previousPivotValues) {\n                this.previousPivotValues = this.pivotObj.pivotValues;\n            }\n            this.previousPivotValues = this.pivotObj.pivotValues;\n        }\n        this.pivotObj.dataSourceSettings.dataSource = this.generateData();\n    };\n    updateClick(): void {\n        if (!this.timerID) {\n            this.updateButton.disabled = true;\n            this.feedDelayInput.enabled = false;\n            this.clearButton.disabled = false;\n            this.timerID = setInterval(this.updateCellValues.bind(this), this.feedDelayInput.value);\n        }\n    };\n    clearClick(): void {\n        if (this.timerID) {\n            this.updateButton.disabled = false;\n            this.feedDelayInput.enabled = true;\n            this.clearButton.disabled = true;\n            clearInterval(this.timerID);\n            this.timerID = undefined;\n        }\n    };\n\n    queryCell(args: QueryCellInfoEventArgs): void {\n        if (args != null && args.cell && args.data) {\n            var currentCell = (args as any).cell.getAttribute('data-colindex');\n            var data = (args as any).data[currentCell];\n            if (data.axis === 'value' && !data.isGrandSum && data.actualText === 'Change') {\n                (args as any).cell.classList.add(this.cellColour(data.value));\n            }\n        }\n    }\n\n    cellColour(value: any): string {\n        let colorIndex: number = value < 0 ? 0 : value > 0 ? 1 : 2;\n        return this.colourScheme[colorIndex];\n    }\n\n    enginePopulated(): any {\n        this.pivotObj.grid.queryCellInfo = this.queryCell.bind(this);\n    }\n\n    ngOnInit(): void {\n        this.chartSettings = {\n            value: 'Price',\n            legendSettings: { visible: false },\n            chartSeries: { type: \"Column\" },\n            zoomSettings: {\n                enableScrollbar: false,\n                toolbarItems: [],\n                enableSelectionZooming: false,\n            } as any,\n            load: this.observable.subscribe(args => {\n                let selectedTheme: string = location.hash.split('/')[1];\n                selectedTheme = selectedTheme ? selectedTheme : 'Material';\n                (args as ILoadedEventArgs).chart.theme = <ChartTheme>(selectedTheme.charAt(0).toUpperCase() +\n                    selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast');\n            }) as any\n        } as ChartSettings;\n\n        this.displayOption = { view: 'Both' } as DisplayOption;\n\n        this.gridSettings = {\n            columnWidth: 100\n        } as GridSettings;\n\n        this.dataSourceSettings = {\n            dataSource: this.generateData(),\n            enableSorting: true,\n            columns: [{ name: 'Type' }],\n            values: [{ name: 'Volume', caption: 'Volume' }, { name: 'Price', caption: 'Price' }, { name: 'Change', type: 'Avg', caption: 'Change(%)' }],\n            rows: [{ name: 'Country' }],\n            filters: [{ name: 'Category' }],\n            formatSettings: [{ name: 'Price', format: 'C2' }, { name: 'Open Price', format: 'C2' }, { name: 'Change', format: \"###.##'%'\" }, { name: 'Volume', format: 'N0' }],\n            expandAll: false,\n            showSubTotals: false,\n            showGrandTotals: false,\n            emptyCellsTextContent: 'Revising',\n            sortSettings: [{name: 'Type', order: 'Ascending', membersOrder: ['Corn', 'Rice', 'Wheat', 'Soybean', 'Coffee', 'Cocoa']}]\n        };\n    }\n\n    public ngOnDestroy(): void {\n        this.destroyClear(undefined);\n    }\n\n    ngAfterViewInit(args: any): void {\n        if (this.initial) {\n            document.getElementById('update1')?.click();\n            this.initial = false;\n            this.feedDelayInput.element.addEventListener('keypress', (e: any) => {\n                if (e && e.key === 'Enter' && (this.feedDelayInput.element.parentElement as HTMLElement).classList.contains('e-input-focus')) {\n                    this.feedDelayInput.value = parseInt(this.feedDelayInput.element.value);\n                    this.feedDelayInput.focusOut();\n                    this.feedDelayInput.element.click();\n                }\n            });\n        }\n    }\n}","app/app.module.ts":"import { CheckBoxAllModule, RadioButtonAllModule, ButtonAllModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { MaskedTextBoxAllModule, NumericTextBoxAllModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { DropDownListAllModule, MultiSelectAllModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { ToolbarModule } from '@syncfusion/ej2-angular-navigations';\n\nimport { PivotFieldListAllModule } from '@syncfusion/ej2-angular-pivotview';\n\nimport { PivotViewAllModule } from '@syncfusion/ej2-angular-pivotview';\n\nimport { HttpModule } from '@angular/http';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { RouterModule } from '@angular/router';\n\nimport { CommonModule } from '@angular/common';\n\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from '../app.component';\n@NgModule({ declarations: [ AppComponent ], imports: [ CommonModule, HttpModule, ToolbarModule, PivotViewAllModule, PivotFieldListAllModule, BrowserModule, NumericTextBoxAllModule, ButtonAllModule, CheckBoxAllModule, RadioButtonAllModule, DropDownListAllModule, MultiSelectAllModule, MaskedTextBoxAllModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"<div>\n    <div class='control-pane'>\n        <div class=\"control-section\">\n            <div style=\"margin-bottom: 10px\">\n                <h4 style=\"display: 'inline-block; fontSize: 14px; paddingLeft: 5px\">\n                    <strong>Feed Delay(ms)</strong>:\n                </h4>\n                <ejs-numerictextbox #feeddelay format=\"N0\" value=\"5000\" min=\"5000\" step=\"1000\" width=\"150px\"\n                    style=\"margin-left: 7px;\">\n                </ejs-numerictextbox>\n                <button #update id=\"update1\" ejs-button (click)=\"updateClick()\" style=\"margin-left: 10px;\">\n                    Start Updating...\n                </button>\n                <button #clear id=\"clear\" ejs-button (click)=\"clearClick()\" style=\"margin-left: 10px;\">\n                    Stop Updating...\n                </button>\n            </div>\n            <ejs-pivotview #pivotview id='PivotView-LiveData' [dataSourceSettings]=dataSourceSettings width='100%'\n                height='350' [chartSettings]='chartSettings' [gridSettings]='gridSettings'\n                [displayOption]='displayOption' (enginePopulated)='enginePopulated()'>\n            </ejs-pivotview>\n        </div>\n    </div>\n</div>","app.component.css":".e-pivotview {\n    width: 100%;\n    height: 100%;\n}\n\n.sb-sample-content-area {\n    min-height: 255px !important;\n}\n\n.control-section {\n    min-height: 255px !important;\n}\n\n#PivotView-LiveData_chart {\n    margin-top: 15px;\n}\n\n.bg-fade {\n    background-color: #FFEBE9 !important;\n    color: #FF3740 !important;\n}\n\n.bg-fade1 {\n    background-color: #DFFFE2 !important;\n    color: #00A653 !important;\n}\n\n.bg-fade2 {\n    color: rgba(0, 0, 0, 0.87);\n}","dependencies.json":"{\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"@syncfusion/ej2-angular-pivotview\":\"*\",\"@syncfusion/ej2-pivotview/src/pivotview/model/chartsettings\":\"*\",\"@syncfusion/ej2-pivotview/src/pivotview/model/gridsettings\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-compression\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-excel-export\":\"*\",\"@syncfusion/ej2-file-utils\":\"*\",\"@syncfusion/ej2-pdf-export\":\"*\",\"@syncfusion/ej2-svg-base\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\"}"}