{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component'; \n\nimport { environment } from './environments/environment'; \n\nimport { enableProdMode } from '@angular/core'; \n\nif (environment.production) { enableProdMode(); } \n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","polyfills.ts":"import 'zone.js';","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n  <link href=\"../../styles/material.css\" rel=\"stylesheet\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\"/>\n</head>\n<body class=\"ej2-new\"> \n\n            <!-- Google Tag Manager (noscript) -->\n            <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n            <!-- End Google Tag Manager (noscript) -->\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app.component.ts":"import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpModule } from '@angular/http';\nimport { TimePickerModule } from '@syncfusion/ej2-angular-calendars';\nimport { DropDownListModule } from '@syncfusion/ej2-angular-dropdowns';\nimport { CheckBoxModule } from '@syncfusion/ej2-angular-buttons';\nimport { Component, ViewEncapsulation, Inject, OnInit, ViewChild } from '@angular/core';\nimport { TimePickerComponent, ItemEventArgs } from '@syncfusion/ej2-angular-calendars';\n/**\n\n * List formatting TimePicker component\n */\n@Component({\n    standalone: true,\n    imports: [ TimePickerModule, DropDownListModule,  FormsModule, ReactiveFormsModule, CheckBoxModule],\n    selector: 'app-root',\n    styleUrls: ['app.component.css'],\n    templateUrl: 'app.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class AppComponent {\n    @ViewChild('duration')\n    public startObject: TimePickerComponent;\n    public timevalue: Date = new Date();\n    //initial time variable declaration\n    public startTime: Date;\n    public onOpen(): void {\n        // scrollTo value will be assigned only if the timepicker value is not null or undefined and is a valid value.\n        if (this.startObject.value && !isNaN(+this.startObject.value)) {\n            // assign the current value as the scrollTo value\n            this.startObject.scrollTo = this.startObject.value;\n        }\n    }\n    public itemRenderHandler(args: ItemEventArgs): void {\n        /*Enables end time if start time is selected*/\n        // inner element declaration for text\n        let span: HTMLElement = document.createElement('span');\n        if (args.value.getHours() === 0 && args.value.getMinutes() === 0 && args.value.getMinutes() === 0) {\n            //assign the initial value to the variable\n            this.startTime = args.value;\n        }\n        //get the minutes details\n        let minutes: number = (+args.value - +this.startTime) / 60000;\n        //get the hours details\n        let hours: number = parseInt('' + (minutes / 60), 10);\n        let mins: number = (minutes % 60) / 6;\n        //displayed text formation for each LI element.\n        let minText: string;\n        let minsText: string = ' mins';\n        let hrsText: string = ' hrs';\n        if (this.startObject.locale != 'en') {\n            if (this.startObject.locale === 'fr-CH') {\n                minsText = ' minutes';\n                hrsText = ' heures';\n            }\n            if (this.startObject.locale === 'de') {\n                minsText = ' minuten';\n                hrsText = ' stunden';\n            }\n            if (this.startObject.locale === 'ar') {\n                minsText = ' دقيقة';\n                hrsText = ' ساعة';\n            }\n            if (this.startObject.locale === 'zh') {\n                minsText = ' 分鐘';\n                hrsText = ' 小時';\n            }\n        }\n        if (minutes === 0 || minutes === 30) {\n            minText = minutes + minsText;\n        } else {\n            minText = (mins > 0) ? ('.' + mins) : '';\n        }\n        span.innerHTML = ' (' + ((hours > 0) ? (hours + minText + hrsText) : ('' + minText)) + ')';\n\n        //disable the specific time from the selection\n        if ((minutes / 60) % 3 === 0) {\n            //disable the time values by addeding the e-disabled class.\n            args.element.classList.add('e-disabled');\n        }\n\n        //append the custom SPAN element into LI element\n        args.element.appendChild(span);\n    }\n}","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<div class=\"control-section sample\">\n    <div class=\"control_wrapper\">\n        <div class=\"tabs-wrap\">\n            <div class=\"wrap\">\n                <ejs-timepicker #duration id='timepicker' [value]='timevalue' (itemRender)='itemRenderHandler($event)' (open)='onOpen()' cssClass='e-customStyle'></ejs-timepicker>\n            </div>\n        </div>\n    </div>\n</div>","app.component.css":".control_wrapper {\n    display: block;\n    margin: 0 auto;\n    max-width: 300px;\n    padding: 5% 0;\n}\n\n.tabs-wrap {\n    padding: 0 0px 10px;\n}\n\n.e-bigger .control-section {\n    margin-top: 60px;\n}\n\n.e-custom-style.e-timepicker.e-popup li.e-diabled span {\n    color: #b7b1b1;\n}\n\n.e-custom-style.e-timepicker.e-popup li span {\n    color: #727070;\n}\n\nbody.bootstrap4 .e-custom-style.e-timepicker.e-popup li span {\n    color: #6c757d;\n}\n\nbody.bootstrap4 .e-custom-style.e-timepicker.e-popup li.e-disabled span {\n    color: #adb5bd;\n}\n\n.highcontrast .e-custom-style.e-timepicker.e-popup li.e-hover span:hover,\n.highcontrast .e-custom-style.e-timepicker.e-popup li.e-active.e-hover span {\n    color: #fff;\n}\n\nbody.bootstrap4 .e-custom-style.e-timepicker.e-popup li.e-hover span:hover,\nbody.bootstrap4 .e-custom-style.e-timepicker.e-popup li.e-active.e-hover span {\n    color: #6c757d;\n}\n\n.highcontrast .e-custom-style.e-timepicker.e-popup li.e-active span {\n    color: #000;\n}\n\nbody.bootstrap4 .e-custom-style.e-timepicker.e-popup li.e-active span {\n    color: #fff;\n}\n\n.e-custom-style.e-timepicker.e-popup li.e-disabled span {\n    height: 25px;\n    width: 25px;\n    font-size: 15px;\n    color: #b7b1b1;\n}","dependencies.json":"{\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-angular-calendars\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\"}"}