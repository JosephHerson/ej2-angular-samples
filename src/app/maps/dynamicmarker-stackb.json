{"main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/guide/browser-support\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/**\n * IE11 requires the following for NgClass support on SVG elements\n */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n */\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n * because those flags need to be set before `zone.js` being loaded, and webpack\n * will put import in the top of bundle, so user need to create a separate file\n * in this directory (for example: zone-flags.ts), and put the following flags\n * into that file, and then add the following code before importing zone.js.\n * import './zone-flags';\n *\n * The flags allowed in zone-flags.ts are listed here.\n *\n * The following flags will work for all browsers.\n *\n * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n *\n *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n *  with the following flag, it will bypass `zone.js` patch for IE/Edge\n *\n *  (window as any).__Zone_enable_cross_context_check = true;\n *\n */\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n  <link href=\"../../styles/material.css\" rel=\"stylesheet\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\"/>\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app.component.ts":"/**\n * Dynamic Marker Sample\n */\nimport { Component, ViewEncapsulation, ViewChild, Inject } from '@angular/core';\nimport {\n    Maps, Marker, Zoom, ILoadEventArgs, MapsTheme,\n    NavigationLine, MarkerSettingsModel, MarkerSettings, MarkerType\n} from '@syncfusion/ej2-angular-maps';\nimport { ChangeEventArgs as CheckBoxChangeEvents } from '@syncfusion/ej2-buttons';\nMaps.Inject(Marker, NavigationLine, Zoom);\n// custom code start\n//tslint:disable:max-func-body-length\n//tslint:disable;\n/* tslint:disable:no-string-literal */\n// custom code end\n\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class AppComponent {\n    public markerCheckedState: boolean = true;\n    public lineCheckedState: boolean = false;\n    public connectLineCheckedState: boolean = false;\n    public navigationLines: Object[] = [];\n    public latitude: number[] = [];\n    public longitude: number[] = [];\n    public lineWidth: number = 1;\n    public disableLineWidthTextBox: boolean = true;\n    public disableConnectLineCheckbox: boolean = true;\n    public disableButton: boolean = true;\n    public disableShapeBox: boolean = false;\n    public markerShape: string = \"Image\";\n\n    @ViewChild('maps')\n    public maps: Maps;\n\n    public load = (args: ILoadEventArgs) => {\n        // custom code start\n        let theme: string = location.hash.split('/')[1];\n        theme = theme ? theme : 'Material'; \n        args.maps.theme = <MapsTheme>(theme.charAt(0).toUpperCase() +\n        theme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i,  'Contrast');\n        // custom code end\n    }\n\n    public zoomSettings: object = {\n        enable: true\n    };\n\n    public layers: object[] = [{\n        layerType: 'OSM'\n    }];\n\n\n    markerChangeHandler = (args: CheckBoxChangeEvents) => {\n        this.markerCheckedState = args.checked;\n        if (args.checked) {\n            this.disableShapeBox = false;\n        } else {\n            this.disableShapeBox = true;\n        }\n    };\n    lineChangeHandler = (args: CheckBoxChangeEvents) => {\n        this.lineCheckedState = args.checked;\n        if (args.checked) {\n            this.disableConnectLineCheckbox = this.disableLineWidthTextBox = !args.checked;\n        }\n        else {\n            this.disableConnectLineCheckbox = this.disableLineWidthTextBox = !args.checked;\n            this.connectLineCheckedState = args.checked;\n        }\n    }\n    connectionLineChangeHandler = (args: CheckBoxChangeEvents) => {\n        this.connectLineCheckedState = args.checked;\n        if (!args.checked) {\n            this.emptySavedLinePositions();\n        }\n\n    }\n    clearItems = () => {\n        this.maps.layers[0].markerSettings = [];\n        this.maps.layers[0].navigationLineSettings = [];\n        this.navigationLines = [];\n        this.emptySavedLinePositions();\n        this.maps.refresh();\n        this.disableButton = true;\n    }\n\n    public mapClicked = (args: any) => {\n        if (this.markerCheckedState) {\n            this.addMarker(args);\n        }\n        if (this.lineCheckedState && !this.connectLineCheckedState) {\n            this.addLine(args, this.lineWidth);\n        }\n        if (this.connectLineCheckedState) {\n            this.addLine(args, this.lineWidth, true);\n        }\n        if (this.markerCheckedState || this.lineCheckedState || this.connectLineCheckedState) {\n            this.maps.refresh();\n            if (this.disableButton && (this.maps.layers[0].markerSettings.length ||\n            this.maps.layers[0].navigationLineSettings.length)) {\n                this.disableButton = false;\n            }\n        }\n    }\n\n    public emptySavedLinePositions: any = () => {\n        this.latitude = [];\n        this.longitude = [];\n    };\n    public addMarker: any = (args: any) => {\n        if (args['latitude'] !== null && args['longitude'] !== null) {\n            let layerIndex: number = 0;\n            let geo = this.maps.getTileGeoLocation(args.layerX, args.layerY);\n            args['latitude'] = geo['latitude'];\n            args['longitude'] = geo['longitude'];\n            let marker: MarkerSettingsModel[];\n            let dynamicMarker: MarkerSettingsModel[] = this.maps.layersCollection[layerIndex].markerSettings;\n            dynamicMarker.push(new MarkerSettings(this.maps, 'markerSettings', marker));\n            let markerIndex: number = dynamicMarker.length - 1;\n            dynamicMarker[markerIndex].visible = true;\n            dynamicMarker[markerIndex].dataSource = [\n                { latitude: args['latitude'], longitude: args['longitude'], name: 'dynamicmarker' }\n            ];\n            dynamicMarker[markerIndex].animationDuration = 0;\n            dynamicMarker[markerIndex].fill = '#DB4537';\n            dynamicMarker[markerIndex].shape = (this.markerShape !== 'Image') ? this.markerShape as MarkerType : 'Image';\n            dynamicMarker[markerIndex].height = (this.markerShape !== 'Image') ? 12 : 20;\n            dynamicMarker[markerIndex].width = (this.markerShape !== 'Image') ? 12 : 20;\n            dynamicMarker[markerIndex].imageUrl = (this.markerShape !== 'Image') ? '' : './assets/maps/images/ballon.png';\n        }\n    };\n    public addLine: any = (lineArgs: any, lineWidth: number, connectiveLine?: boolean) => {\n        let geo = this.maps.getTileGeoLocation(lineArgs.layerX, lineArgs.layerY);\n        lineArgs['latitude'] = geo['latitude'];\n        lineArgs['longitude'] = geo['longitude'];\n        if (lineArgs.latitude != null && lineArgs.longitude != null) {\n            this.latitude.push(lineArgs.latitude);\n            this.longitude.push(lineArgs.longitude);\n        }\n        if (this.latitude.length >= 2) {\n            this.navigationLines.push({\n                'visible': true,\n                'latitude': [this.latitude[(this.latitude.length - 2)], this.latitude[(this.latitude.length - 1)]],\n                'longitude': [this.longitude[(this.longitude.length - 2)], this.longitude[(this.longitude.length - 1)]],\n                'angle': 0,\n                'color': 'blue',\n                'width': (lineWidth > 5) ? 5 : (((5 >= lineWidth) && (lineWidth >= 1)) ? lineWidth : 1)\n            });\n            this.maps.layers[0].navigationLineSettings = this.navigationLines;\n            if (!connectiveLine) {\n                this.emptySavedLinePositions();\n            }\n        }\n    }\n    public markerShapeData: string[] = ['Image', 'Circle', 'Diamond', 'Star', 'Triangle'];\n}\n\n\n","app/app.module.ts":"import {DropDownListModule} from '@syncfusion/ej2-angular-dropdowns';\n\nimport { ButtonModule, CheckBoxModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { SliderModule, TextBoxModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { MapsAllModule } from '@syncfusion/ej2-angular-maps';\n\nimport { HttpModule } from '@angular/http';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { RouterModule } from '@angular/router';\n\nimport { CommonModule } from '@angular/common';\n\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from '../app.component';\n@NgModule({ declarations: [ AppComponent ], imports: [ MapsAllModule, SliderModule, BrowserModule, FormsModule, TextBoxModule, CheckBoxModule, ButtonModule, DropDownListModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"<div class=\"control-section\">\n    <div class=\"col-lg-8\">\n        <ejs-maps #maps id='container' style=\"display:block;\"\n            [zoomSettings]='zoomSettings' [layers]='layers' (load)=\"load($event)\"  \n            (click)=\"mapClicked($event)\">\n        </ejs-maps>\n        <i>\n            <div align=\"center\">\n                <p id=\"content\" style=\"font-size: 16px;color:grey\">Click on the maps to add marker/navigation line</p>\n            </div>\n        </i>\n    </div>\n    <div class=\"col-lg-4 property-section\">\n        <div class=\"property-panel-section\">\n            <div class=\"property-panel-header\">Properties</div>\n            <div class=\"property-panel-content\">\n                <table id=\"property\" title=\"Properties\" style=\"width: 100%;\">\n                    <colgroup>\n                        <col span=\"1\" style=\"width: 50%;\">\n                        <col span=\"1\" style=\"width: 50%;\">\n                    </colgroup>\n                    <tbody>\n                        <tr style=\"height: 50px;\">\n                            <td>\n                                <div style=\"padding: 0px;display:inline-block\">Marker</div>\n                            </td>\n                            <td style=\"width: 50%;\">\n                                <div>\n                                    <ejs-checkbox [checked]=\"markerCheckedState\" (change)=\"markerChangeHandler($event)\">\n                                    </ejs-checkbox>\n                                </div>\n                            </td>\n                        </tr>\n                        <tr style=\"height: 50px;\">\n                            <td>\n                                <div style=\"padding: 0px;\">Line</div>\n                            </td>\n                            <td style=\"width: 50%\">\n                                <div>\n                                    <ejs-checkbox [checked]=\"lineCheckedState\" (change)=\"lineChangeHandler($event)\">\n                                    </ejs-checkbox>\n                                </div>\n                            </td>\n                        </tr>\n                        <tr style=\"height: 50px;\">\n                            <td>\n                                <div style=\"padding: 0px; \">Connecting line</div>\n                            </td>\n                            <td style=\"width: 50%\">\n                                <div>\n                                    <ejs-checkbox [checked]=\"connectLineCheckedState\"\n                                        [disabled]=\"disableConnectLineCheckbox\"\n                                        (change)=\"connectionLineChangeHandler($event)\"></ejs-checkbox>\n                                </div>\n                            </td>\n                        </tr>\n                        <tr style=\"height: 50px;\">\n                            <td style=\"padding: 0px;\">\n                                Marker type\n                            </td>\n                            <td>\n                                <div style=\"margin-right: 10%;\">\n                                    <ejs-dropdownlist id='ddlelement' [dataSource]='markerShapeData'\n                                        [(value)]='markerShape' [readonly]=\"disableShapeBox\" style=\"width: 95%\"></ejs-dropdownlist>\n                                </div>\n                            </td>\n                        </tr>\n                        <tr style=\"height: 50px;\">\n                            <td>\n                                <div style=\"padding: 0px;\">Width</div>\n                            </td>\n                            <td>\n                                <div style=\" width: 84%\">\n                                    <ejs-textbox [(ngModel)]=\"lineWidth\" id=\"width\" style=\"width: 90%\"\n                                        [disabled]=\"disableLineWidthTextBox\"></ejs-textbox>\n                                </div>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n                <div style=\"margin-top: 20px; margin-left: 35%; width: 100%;\">\n                    <button ejs-button\n                        style=\"text-transform:none !important;width: 80px;\"\n                        [disabled]=\"disableButton\" (click)=\"clearItems()\">Clear</button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div><div></div>\n\n<!-- custom code start-->\n<style>\n\t#width.e-input[disabled] {\n        border-bottom-color: inherit;\n        background-image: none;\n    }\n\n</style>","app.component.css":"","dependencies.json":"{\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-maps\":\"*\",\"@syncfusion/ej2-angular-maps\":\"*\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\"}"}