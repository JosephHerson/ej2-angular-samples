{"main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/guide/browser-support\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n */\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n * because those flags need to be set before `zone.js` being loaded, and webpack\n * will put import in the top of bundle, so user need to create a separate file\n * in this directory (for example: zone-flags.ts), and put the following flags\n * into that file, and then add the following code before importing zone.js.\n * import './zone-flags';\n *\n * The flags allowed in zone-flags.ts are listed here.\n *\n * The following flags will work for all browsers.\n *\n * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n *\n *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n *  with the following flag, it will bypass `zone.js` patch for IE/Edge\n *\n *  (window as any).__Zone_enable_cross_context_check = true;\n *\n */\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n  <link href=\"../../styles/material.css\" rel=\"stylesheet\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\"/>\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app.component.ts":"/**\n * Sample for Hierarchical layout\n */\n\n import { Component, ViewEncapsulation, ViewChild } from '@angular/core';\n import { DiagramComponent, IClickEventArgs, ISelectionChangeEventArgs, NodeConstraints } from '@syncfusion/ej2-angular-diagrams';\n import {\n   Diagram,\n   NodeModel,\n   ConnectorModel,\n   LayoutAnimation,\n   DataBinding,\n   HierarchicalTree,\n   SnapConstraints,\n   SnapSettingsModel,\n   TextModel,\n   LayoutOrientation,\n DiagramTools,\n } from '@syncfusion/ej2-diagrams';\n import { ChangeEventArgs as CheckBoxChangeEventArgs } from '@syncfusion/ej2-buttons';\n import { ChangeEventArgs as NumericChangeEventArgs } from '@syncfusion/ej2-inputs';\n import { DataManager, Query } from '@syncfusion/ej2-data';\nimport { TreeViewComponent } from '@syncfusion/ej2-angular-navigations';\n Diagram.Inject(DataBinding, HierarchicalTree, LayoutAnimation);\n\n export interface EmployeeInfo {\n   Name: string;\n }\n \n @Component({\n   selector: 'app-root',\n   templateUrl: 'app.component.html',\n   styleUrls: ['app.component.css'],\n   encapsulation: ViewEncapsulation.None,\n })\n export class AppComponent {\n    @ViewChild('diagram')\n    public diagram: DiagramComponent;\n \n    @ViewChild('treeview')\n    public treeview: TreeViewComponent;\n    public index : number = 1;\n    public targetNodeId : string;\n    public elementNodeId : string;\n    public addBtnDisabled : boolean = true;\n    public deleteBtnDisabled : boolean = true;\n    public data1: object[] = [\n     { Name: \"Plant Manager\", Id: \"1\", hasChild: true, expanded: true },\n     { Name: \"Production Manager\", Id: \"2\", ParentId: \"1\", hasChild: true, expanded: true },\n     { Name: \"Control Room\", Id: \"3\", ParentId: \"2\", hasChild: true, expanded: true },\n     { Name: \"Foreman1\", Id: \"4\", ParentId: \"3\", hasChild: true, expanded: true },\n     { Name: \"Craft Personnel5\", Id: \"5\", ParentId: \"4\" },\n     { Name: \"Craft Personnel6\", Id: \"6\", ParentId: \"4\" },\n     { Name: \"Plant Operator\", Id: \"7\", ParentId: \"2\", hasChild: true, expanded: true },\n     { Name: \"Foreman2\", Id: \"8\", ParentId: \"7\", hasChild: true, expanded: true },\n     { Name: \"Craft Personnel7\", Id: \"9\", ParentId: \"8\" },\n     { Name: \"Administrative Officer\", Id: \"10\", ParentId: \"1\" },\n     { Name: \"Maintenance Manager\", Id: \"11\", ParentId: \"1\", hasChild: true, expanded: true },\n     { Name: \"Electrical Supervisor\", Id: \"12\", ParentId: \"11\", hasChild: true, expanded: true },\n     { Name: \"Craft Personnel1\", Id: \"13\", ParentId: \"12\" },\n     { Name: \"Craft Personnel2\", Id: \"14\", ParentId: \"12\" },\n     { Name: \"Mechanical Supervisor\", Id: \"15\", ParentId: \"11\", hasChild: true, expanded: true },\n     { Name: \"Craft Personnel3\", Id: \"16\", ParentId: \"15\" },\n     { Name: \"Craft Personnel4\", Id: \"17\", ParentId: \"15\" }\n    ];\n    public tools = DiagramTools.Default;\n \n    public items1: DataManager = new DataManager(\n      this.data1 as JSON[],\n      new Query().take(7)\n    );\n    public dataSourceSettings: Object = {\n      //sets the fields to bind\n      id: 'Id', parentId: 'ParentId',\n      dataSource: this.items1,\n      doBinding: (nodeModel: NodeModel, data: object, diagram: Diagram) => {\n         nodeModel.id = (data as any).Id;\n      },\n    };\n    public snapSettings: SnapSettingsModel = {\n      constraints: SnapConstraints.None,\n    };\n  \n    public layout: Object = {\n      type: 'HierarchicalTree',\n      verticalSpacing: 50, horizontalSpacing: 40,\n          enableAnimation: true\n    };\n  \n    //Defines the default node and connector properties\n    public nodeDefaults(node: NodeModel): NodeModel {\n     node.width = 100;\n     node.height = 40;\n     node.style = { strokeWidth: 1, strokeColor: 'whitesmoke', fill: 'CornflowerBlue' };\n     node.annotations = [{ content: (node.data as any).Name, style: { color: 'white' } }];\n     node.constraints = NodeConstraints.Default | NodeConstraints.AllowDrop;\n     return node;\n    }\n  \n    public connDefaults( obj: ConnectorModel, diagram: Diagram): ConnectorModel {\n     obj.type = 'Orthogonal';\n     obj.style = { strokeColor: 'CornflowerBlue' };\n     obj.targetDecorator = { shape: 'Arrow', height: 10, width: 10, style: { fill: 'CornflowerBlue', strokeColor: 'white' } };\n     return obj;\n    }\n \n    public selectionChange(args : ISelectionChangeEventArgs){\n     if (args.state === 'Changed') {\n         if (args.type === \"Addition\") {\n             this.deleteBtnDisabled = false;\n             this.addBtnDisabled = false;\n         } else {\n           this.deleteBtnDisabled = true;\n           this.addBtnDisabled = true;\n         }\n     }\n    }\n    public addButton(){\n     this.add();\n    }\n    public deleteButton(){\n      debugger\n      if ((this.diagram.selectedItems.nodes[0].data as any).Id !== \"1\") {\n       this.remove();\n   }\n    }\n \n    public click(args : IClickEventArgs){\n     if(args.element && (args.element as any).sourceID === undefined && (args.element as any).shape !==undefined) {\n     this.treeview.selectedNodes = [(args.element as any).data.Id];\n     }\n    }\n \n    public dragEnter(args : any) {\n     let lable = '';\n     if (args.dragData) {\n         lable = args.dragData.text;\n     }\n     let node =\n     {\n         id: 'node' + this.index,\n         data: { Name: lable, Id: 'node' + this.index },\n         annotations: [{ content: lable }]\n     };\n     args.dragItem = node;\n    }\n \n     public drop(args : any) {\n     let connector;\n     let tempData;\n     let workingData = this.data1;\n     let diagram = this.diagram;\n       setTimeout(() => {\n          this.targetNodeId = args.target.id;\n          tempData = (workingData as any).filter((a: any) => a.Id === this.targetNodeId);\n          tempData[0].hasChild = true;\n          tempData[0].expanded = true;\n          if (args.element.inEdges.length === 0) {\n              let id = args.element.id;\n              let item = {\n                  Name: args.element.annotations[0].content, Id: args.element.id, ParentId: this.targetNodeId, hasChild: false, expanded: false\n              };\n              this.treeview.addNodes([item], this.targetNodeId, null);\n              connector = { sourceID: this.targetNodeId, targetID: id };\n              diagram.add(connector);\n                 diagram.doLayout();\n                 this.index++;\n                 this.data1.push(item);\n          } else {\n              connector = diagram.getObject(args.element.inEdges[0]);\n              connector.sourceID = this.targetNodeId;\n              diagram.dataBind();\n              diagram.doLayout();\n              this.elementNodeId = args.element.id;\n              tempData = (workingData as any).filter((a: any) => a.Id === this.elementNodeId);\n              tempData[0].ParentId = this.targetNodeId;\n              this.treeview.fields = {\n                  dataSource: this.data1 as any,\n                  id: 'Id',\n                  text: 'Name',\n                  parentID: 'ParentId',\n                  hasChildren: 'hasChild',\n              };\n              this.treeview.refresh();\n          }\n       }, 0);\n \n }\n \n public textEdit(args : any) {\n    debugger;\n    let data:any = this.data1;\n    let treeObj = this.treeview;\n     setTimeout(function () {\n         if (args.annotation) {\n             this.elementNodeId = args.element.id;\n             let tempData = data.filter((a: any)=>a.Id === this.elementNodeId);\n             let node = treeObj.getNode(tempData[0].Id);\n             treeObj.updateNode(tempData[0].Id, args.annotation.content);\n         }\n     }, 0);\n }\n \n public nodeSelected(args : any) {\n     this.deleteBtnDisabled = false;\n     this.addBtnDisabled = false;\n }\n \n public nodeClicked(args : any) {\n     let node = this.diagram.getObject(this.treeview.selectedNodes[0]);\n     this.diagram.select([node]);\n }\n \n // Key Press Event\n public keyPress(args : any) {\n     if (args.event.key === 'Enter') {\n         this.add();\n     }\n }\n \n public nodeEdited(args : any) {\n     let node = this.diagram.getObject(args.nodeData.id);\n     (node as any).annotations[0].content = args.newText;\n     this.treeview.selectedNodes = [args.nodeData.id];\n }\n \n public remove() {\n     let nodeId;\n     if (this.diagram.selectedItems.nodes.length > 0) {\n         nodeId = this.diagram.selectedItems.nodes[0].id;\n         this.removeSubChild(this.diagram.selectedItems.nodes[0], true);\n         this.diagram.doLayout();\n     } else if (this.treeview.selectedNodes.length > 0) {\n         nodeId = this.treeview.selectedNodes[0];\n         this.treeview.removeNodes([nodeId]);\n         let node = this.diagram.getObject(nodeId);\n         this.removeSubChild(node, false);\n     }\n     for (let i = this.data1.length - 1; i >= 0; i--) {\n         if ((this.data1[i] as any).id === nodeId) {\n             this.data1.splice(i, 1);\n         }\n     }\n     this.diagram.doLayout();\n \n }\n \n public removeSubChild(node, canDelete) {\n     let childNode;\n     let connector;\n     for (let i = node.outEdges.length - 1; i >= 0; i--) {\n         connector = this.diagram.getObject(node.outEdges[i]);\n         childNode = this.diagram.getObject(connector.targetID);\n         if (childNode != null && childNode.outEdges.length > 0) {\n             this.removeSubChild(childNode, canDelete);\n         }\n         else {\n             this.diagram.remove(childNode);\n             if (canDelete) {\n                 this.treeview.removeNodes([childNode.id]);\n             }\n             for (let j = this.data1.length - 1; j >= 0; j--) {\n                 if ((this.data1[j] as any).id === childNode.id) {\n                     this.data1.splice(j, 1);\n                 }\n             }\n         }\n     }\n     for (let k = node.inEdges.length - 1; k >= 0; k--) {\n         connector = this.diagram.getObject(node.inEdges[k]);\n         childNode = this.diagram.getObject(connector.sourceID);\n         let index = childNode.outEdges.indexOf(connector.id);\n         if (childNode.outEdges.length > 1 && index === 0) {\n             index = childNode.outEdges.length;\n         }\n         if (index > 0) {\n             let node1 = childNode.outEdges[index - 1];\n             let connector1 = this.diagram.getObject(node1);\n             let node2 = this.diagram.getObject((connector1 as any).targetID);\n             this.diagram.select([node2]);\n         }\n         else {\n             this.diagram.select([childNode]);\n         }\n     }\n     this.diagram.remove(node);\n     if (canDelete) {\n         this.treeview.removeNodes([node.id]);\n     }\n     for (let t = this.data1.length - 1; t >= 0; t--) {\n         if ((this.data1[t] as any).id === node.id) {\n             this.data1.splice(t, 1);\n         }\n     }\n }\n \n public add() {\n     let nodeId;\n     if (this.diagram.selectedItems.nodes.length > 0) {\n         nodeId = this.diagram.selectedItems.nodes[0].id;\n         this.addNode(nodeId);\n     } else if (this.treeview.selectedNodes.length > 0) {\n         nodeId = this.treeview.selectedNodes[0];\n         this.addNode(nodeId);\n     }\n }\n public addNode(nodeId) {\n     this.targetNodeId = nodeId ? nodeId : this.treeview.selectedNodes[0];\n     let tempData = this.data1.filter((a: any) => a.Id === this.targetNodeId);\n     (tempData[0] as any).hasChild = true;\n     (tempData[0] as any).expanded = true;\n     let id = 'tree_' + this.index;\n     let item = {\n         Name: \"Node\", Id: id, ParentId: this.targetNodeId, hasChild: false, expanded: false\n     };\n     this.treeview.addNodes([item], this.targetNodeId, null);\n     this.treeview.beginEdit(id);\n     let node = { id: id, data: item };\n     let targetId;\n     if (this.diagram.selectedItems.nodes.length > 0) {\n         targetId = this.diagram.selectedItems.nodes[0].id;\n     } else {\n         let temp = this.diagram.nodes.filter((a: any) => a.data.Id === this.targetNodeId);\n         targetId = temp[0].id;\n     }\n     let connector = { sourceID: targetId, targetID: id };\n     this.diagram.add(node);\n     this.diagram.add(connector);\n     this.diagram.doLayout();\n     this.index++;\n     this.data1.push(item);\n }\n public field:Object ={ dataSource: this.data1, id: 'Id', text: 'Name', parentID: 'ParentId',\n hasChildren: 'hasChild' };\n \n public allowEditing:boolean = true;\n public allowDragAndDrops:boolean = true;\n \n  }\n  ","app/app.module.ts":"import { DialogAllModule } from '@syncfusion/ej2-angular-popups';\n\nimport { AccumulationChartModule } from '@syncfusion/ej2-angular-charts';\n\nimport { AccumulationAnnotationService, AccumulationDataLabelService, AccumulationLegendService, AccumulationTooltipService, ChartAllModule } from '@syncfusion/ej2-angular-charts';\n\nimport { DiagramAllModule, SymbolPaletteAllModule, OverviewAllModule } from '@syncfusion/ej2-angular-diagrams';\n\nimport { TreeViewModule  } from '@syncfusion/ej2-angular-navigations';\n\nimport { GridAllModule } from '@syncfusion/ej2-angular-grids';\n\nimport { ListViewAllModule } from '@syncfusion/ej2-angular-lists';\n\nimport { DateRangePickerModule } from '@syncfusion/ej2-angular-calendars';\n\nimport { CircularGaugeModule } from '@syncfusion/ej2-angular-circulargauge';\n\nimport { DropDownListAllModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { MultiSelectModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { SplitButtonModule } from '@syncfusion/ej2-angular-splitbuttons';\n\nimport { ComboBoxAllModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { ToolbarModule } from '@syncfusion/ej2-angular-navigations';\n\nimport { NumericTextBoxModule, ColorPickerModule, UploaderModule, TextBoxModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { DropDownButtonModule } from '@syncfusion/ej2-angular-splitbuttons';\n\nimport { ButtonModule, CheckBoxModule, RadioButtonModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { HttpModule } from '@angular/http';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { RouterModule } from '@angular/router';\n\nimport { CommonModule } from '@angular/common';\n\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from '../app.component';\n@NgModule({ declarations: [ AppComponent ], imports: [ DiagramAllModule, ChartAllModule, GridAllModule, SymbolPaletteAllModule, OverviewAllModule, ButtonModule,       ColorPickerModule,  DateRangePickerModule, CheckBoxModule, AccumulationChartModule, BrowserModule,ToolbarModule, DropDownButtonModule, UploaderModule, CircularGaugeModule, DropDownListAllModule, ListViewAllModule,       DialogAllModule, TextBoxModule, RadioButtonModule, ComboBoxAllModule, SplitButtonModule,       MultiSelectModule, NumericTextBoxModule, BrowserModule,TreeViewModule ], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"  <style>\n         #palette-space {\n            border-style: solid;\n            border-color: #f2f2f2;\n            background: #f2f2f2\n        }\n\n        #diagram-space {\n            border-color: #f2f2f2;\n            border-style: solid;\n        }\n  </style>\n<div class=\"control-section\">\n<div style=\"width: 100%;height: 50px;margin-bottom: 5px;\"> \n    <div class=\"btn-group\" style=\"width:70%;float:left;\">\n        <button ejs-button  [isPrimary]=\"true\" id=\"addbtn\"  (click)=\"addButton()\"  [disabled]=\"addBtnDisabled\">Add Node</button>\n        <button ejs-button [isPrimary]=\"true\" id=\"deletebtn\"  (click)=\"deleteButton()\"  [disabled]=\"deleteBtnDisabled\">Delete Node</button>\n    </div>\n    <div style=\"width:30%;float:right;font-size: 16px;\">\n          <div class=\"col-xs-9 db-col-right db-prop-text-style\" style=\"padding-top: 10px\">\n            <span style=\"margin-left: 10px;\">Diagram Binding with Treeview</span>\n          </div>\n          <div class=\"col-xs-3 db-col-left\">\n            <svg height=\"45\" width=\"47\">\n                <path d=\"M27.573,21.885726 C26.039659,21.885726 24.796639,23.128786 24.796639,24.662178 L24.796639,37.3311 C24.796639,38.864491 26.039659,40.107552 27.573,40.107552 L40.064701,40.107552 C41.598042,40.107552 42.841061,38.864491 42.841061,37.3311 L42.841061,24.662178 C42.841061,23.128786 41.598042,21.885726 40.064701,21.885726 z M3.9060001,2.3436508 C2.9710598,2.3436508 2.2131386,3.1015863 2.2131386,4.0365477 L2.2131386,11.76122 C2.2131386,12.69618 2.9710598,13.454117 3.9060001,13.454117 L11.522699,13.454117 C12.457641,13.454117 13.21556,12.69618 13.21556,11.76122 L13.21556,4.0365477 C13.21556,3.1015863 12.457641,2.3436508 11.522699,2.3436508 z M2.7341995,0 L12.8898,0 C14.399857,0 15.624,1.2241688 15.624,2.7342587 L15.624,12.737741 C15.624,14.247831 14.399857,15.472 12.8898,15.472 L8.75,15.472 8.75,29.653 21.167,29.653 21.167,22.526347 C21.167,20.049711 23.174645,18.042 25.6512,18.042 L42.306801,18.042 C44.783356,18.042 46.791,20.049711 46.791,22.526347 L46.791,38.932653 C46.791,41.40929 44.783356,43.417 42.306801,43.417 L25.6512,43.417 C23.174645,43.417 21.167,41.40929 21.167,38.932653 L21.167,32.403 7.3190002,32.403 C6.5596085,32.403 5.9440002,31.787392 5.9440002,31.028 5.9440002,30.933076 5.953619,30.840399 5.9719353,30.75089 L6,30.641743 6,15.472 2.7341995,15.472 C1.2241421,15.472 0,14.247831 0,12.737741 L0,2.7342587 C0,1.2241688 1.2241421,0 2.7341995,0 z\" fill=\"#FF8FABCA\"></path>\n            </svg>\n          </div>\n    </div>\n  </div>\n  <div style=\"width: 100%;\">\n    <div id=\"palette-space\" style=\"width:27%;float:left;height: 700px;overflow: hidden;\">\n        <ejs-treeview #treeview id=\"default\" [fields]='field' width=\"90%\" [allowEditing]='allowEditing' [allowDragAndDrop]='allowDragAndDrops' (keyPress) = \"keyPress($event)\" (nodeEdited) = \"nodeEdited($event)\" (nodeSelected) = \"nodeSelected($event)\" (nodeClicked) = \"nodeClicked($event)\"></ejs-treeview>\n    </div>\n    <div id=\"diagram-space\" style=\"width:72%;float:right\">\n      <div class=\"content-wrapper\" style=\"width:100%;float:right\">\n        <ejs-diagram\n          #diagram\n          id=\"diagram\"\n          width=\"100%\"\n          height=\"700px\"\n          [getConnectorDefaults]=\"connDefaults\"\n          [getNodeDefaults]=\"nodeDefaults\"\n          [layout]=\"layout\"\n          [dataSourceSettings]=\"dataSourceSettings\"\n          [snapSettings]=\"snapSettings\"\n          [tool]=\"tools\"\n          (selectionChange)=\"selectionChange($event)\"\n          (click)=\"click($event)\"\n          (textEdit)=\"textEdit($event)\"\n          (drop)=\"drop($event)\"\n          (dragEnter)=\"dragEnter($event)\"\n        >\n        </ejs-diagram>\n      </div>\n    </div>\n  </div>\n  </div>\n  ","app.component.css":".control-fluid {\n    padding: 0px !important;\n}\n.btn-group button{ \n    margin-right:16px;\n    }\n.btn-group button:last-child{\n    margin-right:0px;\n    }\n.icon span{\n    margin-top: -10px;\n    margin-right: 40px;\n}\n.icon svg{\n    margin-left: 20px;\n    margin-top: 15px;\n}","dependencies.json":"{\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-angular-popups\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-angular-charts\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"@syncfusion/ej2-angular-diagrams\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-grids\":\"*\",\"@syncfusion/ej2-angular-grids\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-angular-lists\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-angular-calendars\":\"*\",\"@syncfusion/ej2-circulargauge\":\"*\",\"@syncfusion/ej2-angular-circulargauge\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-splitbuttons\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\"}"}