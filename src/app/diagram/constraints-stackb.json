{"main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/guide/browser-support\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n */\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n * because those flags need to be set before `zone.js` being loaded, and webpack\n * will put import in the top of bundle, so user need to create a separate file\n * in this directory (for example: zone-flags.ts), and put the following flags\n * into that file, and then add the following code before importing zone.js.\n * import './zone-flags';\n *\n * The flags allowed in zone-flags.ts are listed here.\n *\n * The following flags will work for all browsers.\n *\n * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n *\n *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n *  with the following flag, it will bypass `zone.js` patch for IE/Edge\n *\n *  (window as any).__Zone_enable_cross_context_check = true;\n *\n */\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n  <link href=\"../../styles/material.css\" rel=\"stylesheet\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\"/>\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","script/diagram-common.ts":"/**\n * script for mobile symbol-palette\n */\n\nlet isMobile: boolean;\n\nexport function paletteIconClick() {\n    isMobile = window.matchMedia('(max-width:550px)').matches;\n    if (isMobile) {\n        let paletteIcon: HTMLElement = document.getElementById('palette-icon');\n        if (paletteIcon) {\n            paletteIcon.addEventListener('click', showPaletteIcon, false);\n        }\n    }\n}\n\nexport function showPaletteIcon(): void {\n    let paletteSpace: HTMLElement = document.getElementById('palette-space');\n    isMobile = window.matchMedia('(max-width:550px)').matches;\n    if (isMobile) {\n        if (!paletteSpace.classList.contains('sb-mobile-palette-open')) {\n            paletteSpace.classList.add('sb-mobile-palette-open');\n        } else {\n            paletteSpace.classList.remove('sb-mobile-palette-open');\n        }\n    }\n}\n\n","app.component.ts":"import { Component, ViewEncapsulation, ViewChild,Inject } from '@angular/core';\nimport { ContextMenuSettingsModel, DiagramComponent } from '@syncfusion/ej2-angular-diagrams';\nimport {\n  Diagram, NodeModel, UndoRedo, ConnectorModel, PointPortModel, Connector, FlowShapeModel,\n  SymbolInfo, IDragEnterEventArgs, SnapSettingsModel, MarginModel, TextStyleModel, StrokeStyleModel,\n  OrthogonalSegmentModel, Node, PaletteModel, NodeConstraints, AnnotationConstraints, ConnectorConstraints, SelectorConstraints, DiagramConstraints, ISelectionChangeEventArgs, UserHandleModel, SelectorModel\n} from '@syncfusion/ej2-diagrams';\nimport { ExpandMode } from '@syncfusion/ej2-navigations';\nimport { paletteIconClick } from './script/diagram-common';\nDiagram.Inject(UndoRedo);\n\n/**\n * Default FlowShape sample\n */\n\n@Component({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.css'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class AppComponent {\n  @ViewChild('diagram')\n  //Diagram Properties\n  public diagram: DiagramComponent;\n  constructor() {​​​​​​​\n    \n}​​​​​​​\n  public created(args) {\n    this.diagram.rulerSettings = {\n      showRulers : true\n    }\n  }\n  public nodes : NodeModel[] = [\n    {\n        id:\"textNode1\",\n        // Position of the node\n        offsetX:340,\n        offsetY: 50,\n        // Size of the node\n        width: 500,\n        height: 50,\n        //Sets type of the node\n        shape: { type: 'Text', content: 'Use Node Constraints to restrict end-users from performing certain operations on Node.' },\n        //Customizes the appearances such as text, font, fill, and stroke.\n        style: { strokeColor: 'none', fill: 'none', color: 'black', textAlign: 'Center', },\n        constraints:  NodeConstraints.None\n       \n    },\n    {\n        id:\"rectangle\",\n        offsetX:80,\n        offsetY:160,\n        width: 80,\n        height: 65,\n        // style: { fill: '#6BA5D7', strokeColor: 'white' },\n        shape: { type: 'Basic', shape: 'Rectangle' },\n        annotations: [{ content: 'Selection = False', }],\n        constraints: NodeConstraints.Default & ~ NodeConstraints.Select\n    },\n    {\n        id:\"ellipse\",\n        offsetX:190,\n        offsetY:160,\n        width: 80,\n        height: 80,\n        // style: { fill: '#6BA5D7', strokeColor: 'white' },\n        shape: { type: 'Basic', shape: 'Ellipse',cornerRadius: 10 },\n        annotations: [{ content: 'Dragging = False' }],\n        constraints:  NodeConstraints.Default & ~ NodeConstraints.Drag\n       \n    },\n    {\n        id:\"heptagon\",\n        offsetX:295,\n        offsetY:160,\n        width: 80,\n        height: 80,\n        // style: { fill: '#6BA5D7', strokeColor: 'white' },\n        shape: { type: 'Basic', shape: 'Heptagon' },\n        annotations: [{ content: 'Delete = False' }],\n        constraints: NodeConstraints.Default & ~ NodeConstraints.Delete\n    },\n    {\n        id:\"directData\",\n        offsetX:410,\n        offsetY:160,\n        width: 80,\n        height: 80,\n        rotateAngle:-45,\n        // style: { fill: '#6BA5D7', strokeColor: 'white' },\n        shape: { type: 'Flow', shape: 'DirectData' },\n        annotations: [{ content: 'Rotate = False' }],\n        constraints: NodeConstraints.Default &~ NodeConstraints.Rotate\n    },\n    {\n        id:\"Plus\",\n        offsetX:530,\n        offsetY:160,\n        width: 80,\n        height: 80,\n        // style: { fill: '#6BA5D7', strokeColor: 'white' },\n        shape: { type: 'Basic', shape: 'Plus' },\n        annotations: [{ content: 'TextEdit = False',constraints: AnnotationConstraints.ReadOnly }],\n    },\n    {\n        id:\"decision\",\n        offsetX:630,\n        offsetY:160,\n        width: 80,\n        height: 80,\n        // style: { fill: '#6BA5D7', strokeColor: 'white' },\n        shape: { type: 'Flow', shape: 'Decision' },\n        annotations: [{ content: 'Resizing = False' }],\n       constraints:NodeConstraints.Default & ~ NodeConstraints.Resize\n    },\n    {\n        id:\"textNode2\",\n        // Position of the node\n        offsetX:350,\n        offsetY: 280,\n        // Size of the node\n        width: 550,\n        height: 50,\n        //Sets type of the node\n        shape: { type: 'Text', content: 'Use Connector Constraints to restrict end-users from performing certain operations on Connector.' },\n        //Customizes the appearances such as text, font, fill, and stroke.\n        style: { strokeColor: 'none', fill: 'none', color: 'black', textAlign: 'Center', },\n        constraints:  NodeConstraints.None\n    },\n];\npublic connectors : ConnectorModel[] = [\n    {\n    id: \"select\",\n    type: 'Orthogonal',\n    annotations: [{ content: 'Selection = False' , horizontalAlignment: 'Right' , verticalAlignment: 'Bottom' }],\n     constraints: ConnectorConstraints.Default & ~ ConnectorConstraints.Select,\n     style: {\n        strokeColor: '#6BA5D7',\n        fill: '#6BA5D7',\n        strokeWidth: 2\n    },\n    targetDecorator: {\n        style: {\n            fill: '#6BA5D7',\n            strokeColor: '#6BA5D7'\n        }\n    },\n    sourcePoint: {\n        x: 40,\n        y: 350\n    },\n    targetPoint: {\n        x: 120,\n        y: 430\n    }\n},\n{\n    id: \"connector2\",\n    type: 'Orthogonal',\n    annotations: [{ content: 'Dragging = True',horizontalAlignment: 'Right' , verticalAlignment: 'Bottom'  }],\n    constraints: ConnectorConstraints.Default | ~ConnectorConstraints.Drag,\n     style: {\n        strokeColor: '#6BA5D7',\n        fill: '#6BA5D7',\n        strokeWidth: 2\n    },\n    targetDecorator: {\n        style: {\n            fill: '#6BA5D7',\n            strokeColor: '#6BA5D7'\n        }\n    },\n    sourcePoint: {\n        x: 140,\n        y: 350\n    },\n    targetPoint: {\n        x: 220,\n        y: 430\n    }\n},\n{\n    id: \"delete\",\n    type: 'Orthogonal',\n    annotations: [{ content: 'Delete = False',horizontalAlignment: 'Right' , verticalAlignment: 'Bottom'  }],\n    constraints: (ConnectorConstraints.Default | ConnectorConstraints.DragSegmentThumb) &~(ConnectorConstraints.Delete | ConnectorConstraints.Drag),\n     style: {\n        strokeColor: '#6BA5D7',\n        fill: '#6BA5D7',\n        strokeWidth: 2\n    },\n    targetDecorator: {\n        style: {\n            fill: '#6BA5D7',\n            strokeColor: '#6BA5D7'\n        }\n    },\n    sourcePoint: {\n        x: 250,\n        y: 350\n    },\n    targetPoint: {\n        x: 320,\n        y: 430\n    }\n},\n{\n    id: \"endThumb\",\n    type: 'Orthogonal',\n    annotations: [{ content: 'EndThumb = False' ,horizontalAlignment: 'Right' , verticalAlignment: 'Bottom' }],\n    constraints:(SelectorConstraints.All ) &~ ( SelectorConstraints.ConnectorSourceThumb | SelectorConstraints.ConnectorTargetThumb),\n     style: {\n        strokeColor: '#6BA5D7',\n        fill: '#6BA5D7',\n        strokeWidth: 2\n    },\n    targetDecorator: {\n        style: {\n            fill: '#6BA5D7',\n            strokeColor: '#6BA5D7'\n        }\n    },\n    sourcePoint: {\n        x: 360,\n        y: 350\n    },\n    targetPoint: {\n        x: 440,\n        y: 430\n    }\n},\n{\n    id: \"draggable\",\n    type: 'Orthogonal',\n    annotations: [{ content: 'EndDraggable = False',horizontalAlignment: 'Right' , verticalAlignment: 'Bottom'  }],\n    constraints: (ConnectorConstraints.Default | ConnectorConstraints.DragSegmentThumb) &~(ConnectorConstraints.DragSourceEnd | ConnectorConstraints.DragTargetEnd),\n     style: {\n        strokeColor: '#6BA5D7',\n        fill: '#6BA5D7',\n        strokeWidth: 2\n    },\n    targetDecorator: {\n        style: {\n            fill: '#6BA5D7',\n            strokeColor: '#6BA5D7'\n        }\n    },\n    sourcePoint: {\n        x: 460,\n        y: 350\n    },\n    targetPoint: {\n        x: 540,\n        y: 430\n    }\n},\n{\n    id: \"segmentThumb\",\n    type: 'Orthogonal',\n    annotations: [{ content: 'SegmentThumb = False',horizontalAlignment: 'Right' , verticalAlignment: 'Bottom'  }],\n    constraints: ConnectorConstraints.Default &~ ConnectorConstraints.Drag,\n     style: {\n        strokeColor: '#6BA5D7',\n        fill: '#6BA5D7',\n        strokeWidth: 2\n    },\n    targetDecorator: {\n        style: {\n            fill: '#6BA5D7',\n            strokeColor: '#6BA5D7'\n        }\n    },\n    sourcePoint: {\n        x: 580,\n        y: 350\n    },\n    targetPoint: {\n        x: 660,\n        y: 430\n    }\n},];\n\npublic handles: UserHandleModel[] = [\n  {\n    name: 'delete', pathData: \"M 7.04 22.13 L 92.95 22.13 L 92.95 88.8 C 92.95 91.92 91.55 94.58 88.76 96.74 C 85.97 98.91 82.55 100 78.52 100 L 21.48 100 C 17.45 100 14.03 98.91 11.24 96.74 C 8.45 94.58 7.04 91.92 7.04 88.8 z M 32.22 0 L 67.78 0 L 75.17 5.47 L 100 5.47 L 100 16.67 L 0 16.67 L 0 5.47 L 24.83 5.47 z\",\n    visible: true, offset: 0.5, side: 'Bottom', margin: { top: 0, bottom: 0, left: 0, right: 0 }\n}\n];\n\npublic selectedItems: SelectorModel = {\n  userHandles: this.handles\n};\npublic contextMenuSettings: ContextMenuSettingsModel = {show:true};\npublic getCustomTool: Function = this.getTool.bind(this);\n\npublic getTool(action: string) { \n  if (action == \"delete\") {\n      this.diagram.remove();\n  }\n  };\n\npublic zoomingChange(args){\n  this.diagram.constraints = this.diagram.constraints ^ DiagramConstraints.Zoom;\n}\npublic undoRedoChange(args){\n  this.diagram.constraints = this.diagram.constraints ^ DiagramConstraints.UndoRedo ;\n  this.diagram.dataBind();\n}\n\npublic editingChange(args){\n    for (let i: number = 0; i < this.diagram.nodes.length; i++) {\n        var node = this.diagram.nodes[i];\n        for (let j: number = 0; j < node.annotations.length; j++) {\n          if (node.annotations[j].content) {\n            if (args.checked) {\n              if (node.id !== 'Plus') {\n                node.annotations[j].constraints =\n                  node.annotations[j].constraints ^\n                  AnnotationConstraints.ReadOnly;\n              }\n            } else {\n              node.annotations[j].constraints =\n                node.annotations[j].constraints | AnnotationConstraints.ReadOnly;\n            }\n          }\n        }\n      }\n      for (let x: number = 0; x < this.diagram.connectors.length; x++) {\n        var connector = this.diagram.connectors[x];\n        for (let y: number = 0; y < connector.annotations.length; y++) {\n          if (connector.annotations[y].content) {\n            if (args.checked) {\n              if (connector.id === 'select') {\n                connector.constraints =\n                  connector.constraints & ~(ConnectorConstraints.Select);\n              } else {\n                connector.annotations[y].constraints =\n                  connector.annotations[y].constraints ^\n                  AnnotationConstraints.ReadOnly;\n              }\n            } else {\n              connector.annotations[y].constraints =\n                connector.annotations[y].constraints ^\n                AnnotationConstraints.ReadOnly;\n            }\n          }\n        }\n      }\n      this.diagram.dataBind();\n}\n\npublic contextChange(args){\n  if (args.checked) {\n  this.diagram.contextMenuSettings.show = true;\n  this.diagram.refresh();\n    } \nelse {\n  this.diagram.contextMenuSettings.show = false;\n    }\n  this.diagram.dataBind();\n}\n\npublic selectableChange(args){\n  for (let i : number = 0; i < this.diagram.nodes.length; i++) {\n    let node = this.diagram.nodes[i];\n    if (args.checked) {\n        node.constraints  = node.constraints | NodeConstraints.Select;\n    } \n    else \n    {\n        node.constraints = node.constraints &~  NodeConstraints.Select;\n    }\n    this.diagram.dataBind();\n}\nfor (let j : number = 0; j < this.diagram.connectors.length; j++) {\n  let connector = this.diagram.connectors[j];\n  if (args.checked) {\n      if(connector.id ===\"select\"){\n          connector.constraints= connector.constraints^ ConnectorConstraints.Select;\n      }\n      else{\n          connector.constraints  = connector.constraints | ConnectorConstraints.Select;\n      }\n  } \n  else\n  {\n      if(connector.id ===\"endThumb\"){\n          connector.constraints= connector.constraints ^ ConnectorConstraints.Select;\n      }\n      else\n      {\n      connector.constraints = connector.constraints &~ ConnectorConstraints.Select;\n      }\n  }\n  this.diagram.dataBind();\n}\n\n}\n\npublic draggableChange(args){\n  for (let i:number = 0; i < this.diagram.nodes.length; i++) {\n    let nodes = this.diagram.nodes[i];\n    if (args.checked) {\n         if(nodes.id ===\"ellipse\"){\n            nodes.constraints = NodeConstraints.Default & ~ NodeConstraints.Drag;\n        }\n        else{\n            nodes.constraints = nodes.constraints | NodeConstraints.Drag;\n        }\n    } \n    else {\n          nodes.constraints = nodes.constraints &~ NodeConstraints.Drag;\n    }\n    this.diagram.dataBind();\n}\nfor (let j : number = 0; j < this.diagram.connectors.length; j++) {\n  let connectors = this.diagram.connectors[j];\n    if (args.checked) {\n        connectors.constraints =  connectors.constraints | ConnectorConstraints.Drag;   \n    } else \n    {\n        connectors.constraints = connectors.constraints  &~ ConnectorConstraints.Drag;   \n    }\n    this.diagram.dataBind();\n}\n}\npublic selectionChange(args : ISelectionChangeEventArgs){\n  if(args.state === 'Changing')\n  {\n      if(args.type === 'Addition')\n      {\n          if(args.newValue[0].id === \"endThumb\")\n      {\n        this.diagram.selectedItems.constraints =(SelectorConstraints.All ) &~ ( SelectorConstraints.ConnectorSourceThumb | SelectorConstraints.ConnectorTargetThumb) ;\n          args.newValue[0].constraints = (ConnectorConstraints.Default  | ConnectorConstraints.DragSegmentThumb) &~ (ConnectorConstraints.Drag);\n      }\n      else{\n        this.diagram.selectedItems.constraints = SelectorConstraints.All;\n          }\n      }\n      else\n      {\n        this.diagram.selectedItems.constraints = SelectorConstraints.All;\n      }\n                  \n  }  \n  if(args.state === \"Changed\")\n  {\n      if(args.newValue.length>0 && args.newValue[0] instanceof Node){\n        this.diagram.selectedItems = { constraints: SelectorConstraints.All|SelectorConstraints.UserHandle, userHandles: this.handles };\n          }\n          else{\n              if(args.newValue.length>0 && args.newValue[0].id !== \"endThumb\"){\n                this.diagram.selectedItems = { constraints: SelectorConstraints.All &~ SelectorConstraints.UserHandle };\n              }\n              else{\n                this.diagram.selectedItems = { constraints: SelectorConstraints.All &~(SelectorConstraints.UserHandle|SelectorConstraints.ConnectorSourceThumb | SelectorConstraints.ConnectorTargetThumb)   };\n              }\n          }\n  }\n}\n\n}\n","app/app.module.ts":"import { DialogAllModule } from '@syncfusion/ej2-angular-popups';\n\nimport { AccumulationChartModule } from '@syncfusion/ej2-angular-charts';\n\nimport { AccumulationAnnotationService, AccumulationDataLabelService, AccumulationLegendService, AccumulationTooltipService, ChartAllModule } from '@syncfusion/ej2-angular-charts';\n\nimport { DiagramAllModule, SymbolPaletteAllModule, OverviewAllModule } from '@syncfusion/ej2-angular-diagrams';\n\nimport { TreeViewModule  } from '@syncfusion/ej2-angular-navigations';\n\nimport { GridAllModule } from '@syncfusion/ej2-angular-grids';\n\nimport { ListViewAllModule } from '@syncfusion/ej2-angular-lists';\n\nimport { DateRangePickerModule } from '@syncfusion/ej2-angular-calendars';\n\nimport { CircularGaugeModule } from '@syncfusion/ej2-angular-circulargauge';\n\nimport { DropDownListAllModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { MultiSelectModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { SplitButtonModule } from '@syncfusion/ej2-angular-splitbuttons';\n\nimport { ComboBoxAllModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { ToolbarModule } from '@syncfusion/ej2-angular-navigations';\n\nimport { NumericTextBoxModule, ColorPickerModule, UploaderModule, TextBoxModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { DropDownButtonModule } from '@syncfusion/ej2-angular-splitbuttons';\n\nimport { ButtonModule, CheckBoxModule, RadioButtonModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { HttpModule } from '@angular/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from '../app.component';\n\n@NgModule({ declarations: [ AppComponent ], imports: [ DiagramAllModule, ChartAllModule, GridAllModule, SymbolPaletteAllModule, OverviewAllModule, ButtonModule,       ColorPickerModule,  DateRangePickerModule, CheckBoxModule, AccumulationChartModule, BrowserModule,ToolbarModule, DropDownButtonModule, UploaderModule, CircularGaugeModule, DropDownListAllModule, ListViewAllModule,       DialogAllModule, TextBoxModule, RadioButtonModule, ComboBoxAllModule, SplitButtonModule,       MultiSelectModule, NumericTextBoxModule, BrowserModule,TreeViewModule ], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"<script src=\"script/diagram-common.ts\"></script>\n<style>\n    .e-symbolpalette {\n        display: block;\n    }\n</style>\n<div class=\"col-lg-10 control-section\">\n            <div class=\"content-wrapper\" style=\"width:100%;background: white\">\n                <ejs-diagram #diagram id=\"diagram\" width=\"100%\" height=\"700px\" [nodes]=\"nodes\" [connectors]=\"connectors\"  (created)=\"created($event)\" (selectionChange)=\"selectionChange($event)\" [getCustomTool]=\"getCustomTool\"\n                [selectedItems]=\"selectedItems\" [contextMenuSettings]=\"contextMenuSettings\">\n                </ejs-diagram>\n            </div>\n</div>\n            <div  style=\"float:left;width:120px\">\n                <div class=\"property-panel-header\">\n                    <span>Diagram Constraints</span>\n                </div>\n                <div class=\"row property-panel-content\">\n                    <div class=\"row\" style=\"padding-top: 8px\">\n                        <ejs-checkbox #checkbox label=\"Zooming\" [checked]=\"true\" (change)=\"zoomingChange($event)\"></ejs-checkbox>\n                    </div>\n                    <div class=\"row\" style=\"padding-top: 8px\">\n                        <ejs-checkbox #checkbox label=\"Undo/Redo\" [checked]=\"true\" (change)=\"undoRedoChange($event)\"></ejs-checkbox>\n                    </div>\n                    <div class=\"row\" style=\"padding-top: 8px\">\n                        <ejs-checkbox #checkbox label=\"Editing\" [checked]=\"true\" (change)=\"editingChange($event)\"></ejs-checkbox>\n                    </div>\n                    <div class=\"row\" style=\"padding-top: 8px\">\n                        <ejs-checkbox #checkbox label=\"Context Menu\" [checked]=\"true\" (change)=\"contextChange($event)\"></ejs-checkbox>\n                    </div>\n                    <div class=\"row\" style=\"padding-top: 8px\">\n                        <ejs-checkbox #checkbox label=\"Selectable\" [checked]=\"true\" (change)=\"selectableChange($event)\"></ejs-checkbox>\n                    </div>\n                    <div class=\"row\" style=\"padding-top: 8px\">\n                        <ejs-checkbox #checkbox label=\"Draggable\" [checked]=\"true\" (change)=\"draggableChange($event)\"></ejs-checkbox>\n                    </div>\n                </div>\n            </div>","app.component.css":".sb-mobile-palette {\n    width:240px;\n    height:100%;\n    float:left;\n}\n\n.sb-mobile-palette-bar {\n    display: none;\n}\n\n.sb-mobile-diagram {\n    width:calc(100% - 242px);\n    height: 100%;\n    float: left;\n}\n\n#properties_Container{\n    /* background: #e3e3e3; */\n    float: left;\n    height: 600px;\n    margin-top: 30px;\n    }\n\n@media (max-width: 550px) {\n\n    .sb-mobile-palette {\n        z-index: 19;\n        position: absolute;\n        display: none;\n        transition: transform 300ms linear, visibility 0s linear 300ms;\n        width:39%;\n        height:100%;\n    }\n    \n    .sb-mobile-palette-bar {\n        display: block;\n        width: 100%;\n        background:#fafafa;\n        padding: 10px 10px;\n        border:0.5px solid #e0e0e0;\n        min-height: 40px;\n    }\n    \n    .sb-mobile-diagram {\n        width: 100%;\n        height: 100%;\n        float: left;\n        left: 0px;\n    }\n\n    #palette-icon {\n        font-size: 20px; \n    }\n}\n    \n.sb-mobile-palette-open {\n    position: absolute;\n    display: block;\n    right: 15px;\n}\n\n@font-face {\n    font-family: 'e-ddb-icons1';\n    src: url(data:application/x-font-ttf;charset=utf-8;base64,AAEAAAAKAIAAAwAgT1MvMj1tSfIAAAEoAAAAVmNtYXDnEOdVAAABiAAAADZnbHlmdC1P4gAAAcgAAAAwaGVhZBJhohMAAADQAAAANmhoZWEIVQQDAAAArAAAACRobXR4CAAAAAAAAYAAAAAIbG9jYQAYAAAAAAHAAAAABm1heHABDgAUAAABCAAAACBuYW1lm+wy9gAAAfgAAAK1cG9zdLnsYngAAASwAAAAMAABAAAEAAAAAFwEAAAAAAAD+AABAAAAAAAAAAAAAAAAAAAAAgABAAAAAQAAgNcenF8PPPUACwQAAAAAANelrs4AAAAA16WuzgAAAAAD+AN6AAAACAACAAAAAAAAAAEAAAACAAgAAgAAAAAAAgAAAAoACgAAAP8AAAAAAAAAAQQAAZAABQAAAokCzAAAAI8CiQLMAAAB6wAyAQgAAAIABQMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUGZFZABA5wDnAAQAAAAAXAQAAAAAAAABAAAAAAAABAAAAAQAAAAAAAACAAAAAwAAABQAAwABAAAAFAAEACIAAAAEAAQAAQAA5wD//wAA5wD//wAAAAEABAAAAAEAAAAAAAAAGAAAAAIAAAAAA/gDegACAAcAACUhCQEhATUhAQQC9P6G/YoBMQFF/YqGAjf+hgH0QwAAAAAAEgDeAAEAAAAAAAAAAQAAAAEAAAAAAAEAEwABAAEAAAAAAAIABwAUAAEAAAAAAAMAEwAbAAEAAAAAAAQAEwAuAAEAAAAAAAUACwBBAAEAAAAAAAYAEwBMAAEAAAAAAAoALABfAAEAAAAAAAsAEgCLAAMAAQQJAAAAAgCdAAMAAQQJAAEAJgCfAAMAAQQJAAIADgDFAAMAAQQJAAMAJgDTAAMAAQQJAAQAJgD5AAMAAQQJAAUAFgEfAAMAAQQJAAYAJgE1AAMAAQQJAAoAWAFbAAMAAQQJAAsAJAGzIERpYWdyYW1fU2hhcGVzX0ZPTlRSZWd1bGFyRGlhZ3JhbV9TaGFwZXNfRk9OVERpYWdyYW1fU2hhcGVzX0ZPTlRWZXJzaW9uIDEuMERpYWdyYW1fU2hhcGVzX0ZPTlRGb250IGdlbmVyYXRlZCB1c2luZyBTeW5jZnVzaW9uIE1ldHJvIFN0dWRpb3d3dy5zeW5jZnVzaW9uLmNvbQAgAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQAUgBlAGcAdQBsAGEAcgBEAGkAYQBnAHIAYQBtAF8AUwBoAGEAcABlAHMAXwBGAE8ATgBUAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQAVgBlAHIAcwBpAG8AbgAgADEALgAwAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQARgBvAG4AdAAgAGcAZQBuAGUAcgBhAHQAZQBkACAAdQBzAGkAbgBnACAAUwB5AG4AYwBmAHUAcwBpAG8AbgAgAE0AZQB0AHIAbwAgAFMAdAB1AGQAaQBvAHcAdwB3AC4AcwB5AG4AYwBmAHUAcwBpAG8AbgAuAGMAbwBtAAAAAAIAAAAAAAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgECAQMABlNoYXBlcwAA) format('truetype');\n    font-weight: normal;\n    font-style: normal;\n}\n.e-ddb-icons1 {\n    font-family: 'e-ddb-icons1';\n    speak: none;\n    font-size: 16px;\n    font-style: normal;\n    font-weight: normal;\n    font-variant: normal;\n    text-transform: none;\n    line-height: 1;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n}\n\n.e-toggle-palette::before {\n    content: \"\\e700\"\n}\n\n.image-pattern-style {\n    background-color: white;\n    background-size: contain;\n    background-repeat: no-repeat;\n    height: 45px;\n    width: calc((100% - 13px) / 3);\n    cursor: pointer;\n    border: 1px solid #D5D5D5;\n    background-position: center;\n    float: left;\n}\n\n.image-pattern-style:hover {\n    border-color: gray;\n    border-width: 2px;\n}\n\n.row {\n    margin-left: 0px;\n    margin-right: 0px;\n}\n\n.row-header {\n    font-size: 13px;\n    font-weight: 500;\n}\n\n.e-checkbox-wrapper .e-label {\n    font-size: 12px;\n}\n\n.col-xs-6 {\n    padding-left: 0px;\n    padding-right: 0px;\n}\n\n.e-selected-style {\n    border-color: #006CE6;\n    border-width: 2px;\n}\n","dependencies.json":"{\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-angular-popups\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-angular-charts\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"@syncfusion/ej2-angular-diagrams\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-grids\":\"*\",\"@syncfusion/ej2-angular-grids\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-angular-lists\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-angular-calendars\":\"*\",\"@syncfusion/ej2-circulargauge\":\"*\",\"@syncfusion/ej2-angular-circulargauge\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-splitbuttons\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\"}"}