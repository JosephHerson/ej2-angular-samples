{"main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/guide/browser-support\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n */\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n * because those flags need to be set before `zone.js` being loaded, and webpack\n * will put import in the top of bundle, so user need to create a separate file\n * in this directory (for example: zone-flags.ts), and put the following flags\n * into that file, and then add the following code before importing zone.js.\n * import './zone-flags';\n *\n * The flags allowed in zone-flags.ts are listed here.\n *\n * The following flags will work for all browsers.\n *\n * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n *\n *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n *  with the following flag, it will bypass `zone.js` patch for IE/Edge\n *\n *  (window as any).__Zone_enable_cross_context_check = true;\n *\n */\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n  <link href=\"../../styles/material.css\" rel=\"stylesheet\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\"/>\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","script/diagram-common.ts":"/**\n * script for mobile symbol-palette\n */\n\nlet isMobile: boolean;\n\nexport function paletteIconClick() {\n    isMobile = window.matchMedia('(max-width:550px)').matches;\n    if (isMobile) {\n        let paletteIcon: HTMLElement = document.getElementById('palette-icon');\n        if (paletteIcon) {\n            paletteIcon.addEventListener('click', showPaletteIcon, false);\n        }\n    }\n}\n\nexport function showPaletteIcon(): void {\n    let paletteSpace: HTMLElement = document.getElementById('palette-space');\n    isMobile = window.matchMedia('(max-width:550px)').matches;\n    if (isMobile) {\n        if (!paletteSpace.classList.contains('sb-mobile-palette-open')) {\n            paletteSpace.classList.add('sb-mobile-palette-open');\n        } else {\n            paletteSpace.classList.remove('sb-mobile-palette-open');\n        }\n    }\n}\n\n","app.component.ts":"import { Component, ViewEncapsulation, ViewChild,Inject } from '@angular/core';\nimport { DiagramComponent } from '@syncfusion/ej2-angular-diagrams';\nimport {\n  Diagram, NodeModel, UndoRedo, ConnectorModel, PointPortModel, Connector, FlowShapeModel,\n  SymbolInfo, IDragEnterEventArgs, SnapSettingsModel, MarginModel, TextStyleModel, StrokeStyleModel,\n  OrthogonalSegmentModel, Node, PaletteModel, PortVisibility, SnapConstraints, DiagramTools\n} from '@syncfusion/ej2-diagrams';\nimport { ExpandMode } from '@syncfusion/ej2-navigations';\nimport { paletteIconClick } from './script/diagram-common';\nDiagram.Inject(UndoRedo);\n\n/**\n * Default FlowShape sample\n */\n\n@Component({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  encapsulation: ViewEncapsulation.None\n})\nexport class AppComponent {\n  @ViewChild('diagram')\n  //Diagram Properties\n  public diagram: DiagramComponent;\n  constructor() {​​​​​​​\n    \n}​​​​​​​\n\npublic nodes : NodeModel[] = [\n  {\n      id: 'employee', width: 100, height: 60, offsetX: 100, offsetY: 100,\n    shape: { type: 'Text', content: 'Employee'},style:{fill:'transparent',bold:true}\n  },\n  {\n      id: 'teamLead', width: 100, height: 60, offsetX: 350, offsetY: 100,\n    shape: { type: 'Text',content:'Team Lead' },style:{fill:'transparent',bold:true}\n  },\n  {\n      id: 'dashboard', width: 100, height: 60, offsetX: 600, offsetY: 100,\n    shape: { type: 'Text', content: 'Dashboard'},style:{fill:'transparent',bold:true}\n  },\n  {\n      id: 'manager', width: 100, height: 60, offsetX: 850, offsetY: 100,\n    shape: { type: 'Text', content: 'Manager'},style:{fill:'transparent',bold:true}\n  },\n  {\n      id: 'leaveRequest', width: 100, height: 60, offsetX: 225, offsetY: 250,\n    shape: { type: 'Text',content:'Leave Request' },style:{fill:'transparent'}\n  },\n  {\n      id: 'leaveApproval', width: 100, height: 60, offsetX: 225, offsetY: 484,\n    shape: { type: 'Text', content: 'Leave Approval'},style:{fill:'transparent'}\n  },\n  {\n      id:'checkEmplyeeAvail',shape:{type:'Text',content:'Check Employee availability and task status'},height:30,width:175,\n      offsetX:470,offsetY:345,style:{fill:'transparent'},\n  },\n  {\n      id:'forwardLeaveMssg',shape:{type:'Text',content:'Forward Leave Request'},height:30,width:150,\n      offsetX:600,offsetY:420,style:{fill:'transparent'}\n  },\n  {\n      id:'noObjection',shape:{type:'Text',content:'No Objection'},height:30,width:150,\n      offsetX:600,offsetY:460,style:{fill:'transparent'}\n  },\n  // Normal nodes\n  {\n      id:'employeeNode',shape:{type:'Basic',shape:'Rectangle'},width:10,height:250,offsetX:100,offsetY:350,\n      style:{fill:'orange',strokeColor:'orange'},\n      ports:[{id:'p1',offset:{x:1,y:0.05},visibility:PortVisibility.Hidden},\n              {id:'p2',offset:{x:1,y:0.97},visibility:PortVisibility.Hidden},]\n  },\n  {\n      id:'teamLeadNode',shape:{type:'Basic',shape:'Rectangle'},width:10,height:190,offsetX:350,offsetY:320,\n      style:{fill:'orange',strokeColor:'orange'},\n      ports:[{id:'p1',offset:{x:0,y:0.07},visibility:PortVisibility.Hidden},\n      {id:'p2',offset:{x:1,y:0.92},visibility:PortVisibility.Hidden},\n      {id:'p3',offset:{x:1,y:0.5},visibility:PortVisibility.Hidden},]\n  },\n  {\n      id:'dashboardNode',shape:{type:'Basic',shape:'Rectangle'},width:10,height:25,offsetX:600,offsetY:320,\n      style:{fill:'orange',strokeColor:'orange'},\n      ports:[{id:'p1',offset:{x:0,y:0.5},visibility:PortVisibility.Hidden}]\n  },\n  {\n      id:'managerNode',shape:{type:'Basic',shape:'Rectangle'},width:10,height:50,offsetX:850,offsetY:420,\n      style:{fill:'orange',strokeColor:'orange'},\n      ports:[{id:'p1',offset:{x:0,y:0.1},visibility:PortVisibility.Hidden},\n      {id:'p2',offset:{x:0,y:0.9},visibility:PortVisibility.Hidden},]\n  },\n\n];\n\npublic connectors : ConnectorModel[] = [\n  // straight connectors \n  {\n      id:'employeeCon1',type:'Straight',sourcePoint:{x:100,y:120},targetPoint:{x:100,y:225},\n      targetDecorator:{shape:'None'},style:{strokeColor:'#A5A6A7'}\n  },\n  {\n      id:'employeeCon2',type:'Straight',sourcePoint:{x:100,y:475},targetPoint:{x:100,y:600},\n      targetDecorator:{shape:'None'},style:{strokeColor:'#A5A6A7'}\n  },\n  {\n      id:'teamLeanCon1',type:'Straight',sourcePoint:{x:350,y:120},targetPoint:{x:350,y:225},\n      targetDecorator:{shape:'None'},style:{strokeColor:'#A5A6A7'}\n  },\n  {\n      id:'teamLeanCon2',type:'Straight',sourcePoint:{x:350,y:415},targetPoint:{x:350,y:600},\n      targetDecorator:{shape:'None'},style:{strokeColor:'#A5A6A7'}\n  },\n  {\n      id:'dashboardCon1',type:'Straight',sourcePoint:{x:600,y:120},targetPoint:{x:600,y:307},\n      targetDecorator:{shape:'None'},style:{strokeColor:'#A5A6A7'}\n  },\n  {\n      id:'dashboardCon2',type:'Straight',sourcePoint:{x:600,y:333},targetPoint:{x:600,y:600},\n      targetDecorator:{shape:'None'},style:{strokeColor:'#A5A6A7'}\n  },\n  {\n      id:'managerCon1',type:'Straight',sourcePoint:{x:850,y:120},targetPoint:{x:850,y:395},\n      targetDecorator:{shape:'None'},style:{strokeColor:'#A5A6A7'}\n  },\n  {\n      id:'managerCon2',type:'Straight',sourcePoint:{x:850,y:445},targetPoint:{x:850,y:600},\n      targetDecorator:{shape:'None'},style:{strokeColor:'#A5A6A7'}\n  },\n\n  // arrow connectors\n  {\n      id:'empToTeamLead',type:'Straight',sourceID:'employeeNode',sourcePortID:'p1',\n      targetID:'teamLeadNode',targetPortID:'p1'\n  },\n  {\n      id:'teamLeadToEmp',type:'Straight',sourcePoint:{x:350,y:465},style:{strokeDashArray:'4 4'},\n      targetID:'employeeNode',targetPortID:'p2'\n  },\n  {\n      id:'teamLeadToDash',type:'Straight',sourceID:'teamLeadNode',sourcePortID:'p3',\n      targetID:'dashboardNode',targetPortID:'p1'\n  },\n  {\n      id:'teamLeadToManager',type:'Straight',sourceID:'teamLeadNode',sourcePortID:'p2',\n      targetID:'managerNode',targetPortID:'p1'\n  },\n  {\n      id:'managerToTeamLead',type:'Straight',sourceID:'managerNode',sourcePortID:'p2',\n      targetPoint:{x:350,y:440},style:{strokeDashArray:'4 4'}\n  },\n];\n\n  public connDefaults(obj: Connector): void {\n    obj.targetDecorator.style = {fill:'#489ECC',strokeColor:'#489ECC'};\n    if(obj.targetDecorator.shape === 'Arrow'){\n    obj.style = {strokeColor:'#489ECC',strokeWidth:2};\n    }\n  }\n  public created(args : any): void {\n    this.diagram.fitToPage();\n  }\n\n  public tools = DiagramTools.ZoomPan;\n\n  public snapSettings: SnapSettingsModel = {\n    constraints : SnapConstraints.None\n  };\n\n}","app/app.module.ts":"import { DialogAllModule } from '@syncfusion/ej2-angular-popups';\n\nimport { AccumulationChartModule } from '@syncfusion/ej2-angular-charts';\n\nimport { AccumulationAnnotationService, AccumulationDataLabelService, AccumulationLegendService, AccumulationTooltipService, ChartAllModule } from '@syncfusion/ej2-angular-charts';\n\nimport { DiagramAllModule, SymbolPaletteAllModule, OverviewAllModule } from '@syncfusion/ej2-angular-diagrams';\n\nimport { TreeViewModule  } from '@syncfusion/ej2-angular-navigations';\n\nimport { GridAllModule } from '@syncfusion/ej2-angular-grids';\n\nimport { ListViewAllModule } from '@syncfusion/ej2-angular-lists';\n\nimport { DateRangePickerModule } from '@syncfusion/ej2-angular-calendars';\n\nimport { CircularGaugeModule } from '@syncfusion/ej2-angular-circulargauge';\n\nimport { DropDownListAllModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { MultiSelectModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { SplitButtonModule } from '@syncfusion/ej2-angular-splitbuttons';\n\nimport { ComboBoxAllModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { ToolbarModule } from '@syncfusion/ej2-angular-navigations';\n\nimport { NumericTextBoxModule, ColorPickerModule, UploaderModule, TextBoxModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { DropDownButtonModule } from '@syncfusion/ej2-angular-splitbuttons';\n\nimport { ButtonModule, CheckBoxModule, RadioButtonModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { HttpModule } from '@angular/http';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { RouterModule } from '@angular/router';\n\nimport { CommonModule } from '@angular/common';\n\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from '../app.component';\n@NgModule({ declarations: [ AppComponent ], imports: [ DiagramAllModule, ChartAllModule, GridAllModule, SymbolPaletteAllModule, OverviewAllModule, ButtonModule,       ColorPickerModule,  DateRangePickerModule, CheckBoxModule, AccumulationChartModule, BrowserModule,ToolbarModule, DropDownButtonModule, UploaderModule, CircularGaugeModule, DropDownListAllModule, ListViewAllModule,       DialogAllModule, TextBoxModule, RadioButtonModule, ComboBoxAllModule, SplitButtonModule,       MultiSelectModule, NumericTextBoxModule, BrowserModule,TreeViewModule ], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"\n<script src=\"script/diagram-common.ts\"></script>\n<style>\n   \n</style>\n<div class=\"control-section\">\n    <div style=\"width: 100%\">\n            <div class=\"content-wrapper\">\n                <ejs-diagram #diagram id=\"diagram\" width=\"100%\" height=\"700px\" [nodes]= \"nodes\" [connectors]=\"connectors\" [snapSettings]='snapSettings' (created)=\"created($event)\" [getConnectorDefaults]='connDefaults' [tool] = \"tools\">\n                </ejs-diagram>\n            </div>\n    </div>\n</div>","app.component.css":"","dependencies.json":"{\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-angular-popups\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-angular-charts\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"@syncfusion/ej2-angular-diagrams\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-grids\":\"*\",\"@syncfusion/ej2-angular-grids\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-angular-lists\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-angular-calendars\":\"*\",\"@syncfusion/ej2-circulargauge\":\"*\",\"@syncfusion/ej2-angular-circulargauge\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-splitbuttons\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\"}"}