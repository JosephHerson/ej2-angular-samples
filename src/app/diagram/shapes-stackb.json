{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component'; \n\nimport { environment } from './environments/environment'; \n\nimport { enableProdMode } from '@angular/core'; \n\nif (environment.production) { enableProdMode(); } \n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","polyfills.ts":"import 'zone.js';","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n  <link href=\"../../styles/material.css\" rel=\"stylesheet\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\"/>\n</head>\n<body class=\"ej2-new\"> \n\n            <!-- Google Tag Manager (noscript) -->\n            <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n            <!-- End Google Tag Manager (noscript) -->\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app.component.ts":"import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpModule } from '@angular/http';\nimport { ButtonModule, CheckBoxModule, RadioButtonModule } from '@syncfusion/ej2-angular-buttons';\nimport { DropDownButtonModule } from '@syncfusion/ej2-angular-splitbuttons';\nimport { NumericTextBoxModule, ColorPickerModule, UploaderModule, TextBoxModule } from '@syncfusion/ej2-angular-inputs';\nimport { ToolbarModule } from '@syncfusion/ej2-angular-navigations';\nimport { ComboBoxAllModule } from '@syncfusion/ej2-angular-dropdowns';\nimport { SplitButtonModule } from '@syncfusion/ej2-angular-splitbuttons';\nimport { MultiSelectModule } from '@syncfusion/ej2-angular-dropdowns';\nimport { DropDownListAllModule } from '@syncfusion/ej2-angular-dropdowns';\nimport { CircularGaugeModule } from '@syncfusion/ej2-angular-circulargauge';\nimport { DateRangePickerModule } from '@syncfusion/ej2-angular-calendars';\nimport { ListViewAllModule } from '@syncfusion/ej2-angular-lists';\nimport { GridAllModule } from '@syncfusion/ej2-angular-grids';\nimport { TreeViewModule  } from '@syncfusion/ej2-angular-navigations';\nimport { DiagramAllModule, SymbolPaletteAllModule, OverviewAllModule } from '@syncfusion/ej2-angular-diagrams';\nimport { AccumulationAnnotationService, AccumulationDataLabelService, AccumulationLegendService, AccumulationTooltipService, ChartAllModule } from '@syncfusion/ej2-angular-charts';\nimport { AccumulationChartModule } from '@syncfusion/ej2-angular-charts';\nimport { DialogAllModule } from '@syncfusion/ej2-angular-popups';\nimport { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport {\n    Diagram, NodeModel, BpmnDiagrams, SnapSettingsModel, SnapConstraints,\n    FlowShapes, FlowShapeModel, TextModel\n} from '@syncfusion/ej2-diagrams';\nimport { DiagramComponent } from '@syncfusion/ej2-angular-diagrams';\n\nDiagram.Inject(BpmnDiagrams);\n\n@Component({\n    standalone: true,\n    imports: [ DiagramAllModule, ChartAllModule, GridAllModule, SymbolPaletteAllModule, OverviewAllModule, ButtonModule,       ColorPickerModule, DateRangePickerModule, CheckBoxModule, AccumulationChartModule, ToolbarModule, DropDownButtonModule, UploaderModule, CircularGaugeModule, DropDownListAllModule, ListViewAllModule,       DialogAllModule, TextBoxModule, RadioButtonModule, ComboBoxAllModule, SplitButtonModule,       MultiSelectModule, NumericTextBoxModule, TreeViewModule ],\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None\n})\n\nexport class AppComponent {\n\n    @ViewChild('diagram')\n    public diagram: DiagramComponent;\n\n    private basicShapeModel: NodeModel[] = [\n        {\n            shape: { type: 'Text', content: 'Basic Shapes' },\n            style: { fontSize: 16, fill: 'None', fontFamily: 'sans-serif', bold: true, strokeWidth: 0 },\n        },\n        {\n            shape: { type: 'Basic', shape: 'Rectangle' }, annotations: [\n                { content: 'Rectangle' }\n            ]\n        },\n        {\n            shape: { type: 'Basic', shape: 'Ellipse' }, annotations: [\n                { content: 'Ellipse' }\n            ]\n        },\n        {\n            shape: { type: 'Basic', shape: 'Triangle' }, annotations: [\n                { content: 'Triangle' }\n            ]\n        },\n        {\n            shape: { type: 'Basic', shape: 'Plus' }, annotations: [\n                { content: 'Plus' }\n            ]\n        },\n        {\n            shape: { type: 'Basic', shape: 'Star' }, annotations: [\n                { content: 'Star' }\n            ]\n        },\n        {\n            shape: { type: 'Basic', shape: 'Pentagon' }, annotations: [\n                { content: 'Pentagon' }\n            ]\n        },\n        {\n            shape: { type: 'Basic', shape: 'Heptagon' }, annotations: [\n                { content: 'Heptagon' }\n            ]\n        },\n        {\n            shape: { type: 'Basic', shape: 'Octagon' }, annotations: [\n                { content: 'Octagon' }\n            ]\n        },\n        {\n            shape: { type: 'Basic', shape: 'Trapezoid' }, annotations: [\n                { content: 'Trapezoid' }\n            ]\n        },\n        {\n            shape: { type: 'Basic', shape: 'Decagon' }, annotations: [\n                { content: 'Decagon' }\n            ]\n        },\n        {\n            shape: { type: 'Basic', shape: 'RightTriangle' }, annotations: [\n                { content: 'Right Triangle' }\n            ]\n        },\n        {\n            shape: { type: 'Basic', shape: 'Parallelogram' }, annotations: [\n                { content: 'Parallelogram' }\n            ]\n        },\n    ];\n\n    private flowShapeModel: NodeModel[] = [\n        {\n            shape: { type: 'Text', content: 'Flow Shapes' },\n            style: { fontSize: 16, fill: 'None', fontFamily: 'sans-serif', bold: true, strokeWidth: 0 },\n        },\n        {\n            shape: { type: 'Flow', shape: 'Terminator' }, annotations: [\n                { content: 'Terminator' }\n            ]\n        },\n        {\n            shape: { type: 'Flow', shape: 'Process' }, annotations: [\n                { content: 'Process' }\n            ]\n        },\n        {\n            shape: { type: 'Flow', shape: 'Decision' }, annotations: [\n                { content: 'Decision' }\n            ]\n        },\n        {\n            shape: { type: 'Flow', shape: 'Document' }, annotations: [\n                { content: 'Document' }\n            ]\n        },\n        {\n            shape: { type: 'Flow', shape: 'PreDefinedProcess' }, annotations: [\n                { content: 'Predefined Process' }\n            ]\n        },\n        {\n            shape: { type: 'Flow', shape: 'PaperTap' }, annotations: [\n                { content: 'Paper Tape' }\n            ]\n        },\n        {\n            shape: { type: 'Flow', shape: 'DirectData' }, annotations: [\n                { content: 'Direct Data' }\n            ]\n        },\n        {\n            shape: { type: 'Flow', shape: 'SequentialData' }, annotations: [\n                { content: 'Direct Data' }\n            ]\n        },\n        {\n            shape: { type: 'Flow', shape: 'Sort' }, annotations: [\n                { content: 'Sort' }\n            ]\n        },\n        {\n            shape: { type: 'Flow', shape: 'MultiDocument' }, annotations: [\n                { content: 'Multi-Document' }\n            ]\n        },\n        {\n            shape: { type: 'Flow', shape: 'Collate' }, annotations: [\n                { content: 'Collate' }\n            ]\n        },\n        {\n            shape: { type: 'Flow', shape: 'SummingJunction' }, annotations: [\n                { content: 'Summing Junction' }\n            ]\n        },\n        {\n            shape: { type: 'Flow', shape: 'Or' }, annotations: [\n                { content: 'Or' }\n            ]\n        },\n        {\n            shape: { type: 'Flow', shape: 'InternalStorage' }, annotations: [\n                { content: 'Internal Storage' }\n            ]\n        },\n        {\n            shape: { type: 'Flow', shape: 'Extract' }, annotations: [\n                { content: 'Extract' }\n            ]\n        },\n        {\n            shape: { type: 'Flow', shape: 'ManualOperation' }, annotations: [\n                { content: 'Manual Operation' }\n            ]\n        },\n        {\n            shape: { type: 'Flow', shape: 'Merge' }, annotations: [\n                { content: 'Merge' }\n            ]\n        },\n        {\n            shape: { type: 'Flow', shape: 'OffPageReference' }, annotations: [\n                { content: 'Off-Page Reference' }\n            ]\n        },\n        {\n            shape: { type: 'Flow', shape: 'SequentialAccessStorage' }, annotations: [\n                { content: 'Sequential Access Storage' }\n            ]\n        },\n        {\n            shape: { type: 'Flow', shape: 'Data' }, annotations: [\n                { content: 'Data' }\n            ]\n        },\n        {\n            shape: { type: 'Flow', shape: 'Card' }, annotations: [\n                { content: 'Card' }\n            ]\n        },\n    ];\n\n    private bpmnShapeModel: NodeModel[] = [\n        {\n            shape: { type: 'Text', content: 'BPMN Shapes' },\n            style: { fontSize: 16, fill: 'none', fontFamily: 'sans-serif', bold: true, strokeWidth: 0 },\n        },\n        {\n            shape: { type: 'Bpmn', shape: 'Event', event: { event: 'Start', trigger: 'None' } },\n            annotations: [\n                { content: 'Start Event' }\n            ]\n        },\n        {\n            shape: { type: 'Bpmn', shape: 'Event', event: { event: 'Intermediate', trigger: 'None' } },\n            annotations: [\n                { content: 'Intermediate Event' }\n            ]\n        },\n        {\n            shape: { type: 'Bpmn', shape: 'Event', event: { event: 'End', trigger: 'None' } },\n            annotations: [\n                { content: 'End Event' }\n            ]\n        },\n        {\n            shape: { type: 'Bpmn', shape: 'Gateway' },\n            annotations: [\n                { content: 'Gateway' }\n            ]\n        },\n        {\n            shape: { type: 'Bpmn', shape: 'Activity', activity: { activity: 'Task' } },\n            annotations: [\n                { content: 'Task' }\n            ]\n        },\n        {\n            shape: {\n                type: 'Bpmn', shape: 'Activity', activity: {\n                    activity: 'SubProcess',\n                    subProcess: {\n                        type: 'Transaction', transaction: {\n                            success: { visible: false }, failure: { visible: false }, cancel: { visible: false }\n                        }\n                    }\n                },\n            },\n            annotations: [\n                { content: 'Transaction' }\n            ]\n        },\n        {\n            shape: { type: 'Bpmn', shape: 'Message' }, annotations: [{ content: 'Message' }]\n        },\n        {\n            shape: { type: 'Bpmn', shape: 'DataObject' }, annotations: [{ content: 'Data Object' }]\n        },\n        {\n            shape: { type: 'Bpmn', shape: 'DataSource' }, annotations: [{ content: 'Data Source' }]\n        },\n        {\n            shape: { type: 'Bpmn', shape: 'Group' }, annotations: [{ content: 'Group' }]\n        }\n    ];\n    public snapSettings: SnapSettingsModel = { constraints: SnapConstraints.None };\n    public nodes: NodeModel[] = this.getNodes();\n\n    private getNodes(): NodeModel[] {\n        let nodes1: NodeModel[] = this.basicShapeModel;\n        nodes1 = nodes1.concat(this.flowShapeModel).concat(this.bpmnShapeModel);\n        let offsetx: number = 60;\n        let offsety: number = 50;\n        let count: number = 1;\n        for (let i: number = 0; i < nodes1.length; i++) {\n            let node: NodeModel = nodes1[i];\n            node.width = 40;\n            node.height = 40;\n            if (node.shape.type === 'Flow') {\n                let shapeType: FlowShapes = (node.shape as FlowShapeModel).shape;\n                if (shapeType === 'Process' || shapeType === 'Terminator') {\n                    node.height = 20;\n                } else if (shapeType === 'Decision') {\n                    node.height = 35;\n                } else if (shapeType === 'Document' || shapeType === 'DirectData' ||\n                    shapeType === 'MultiDocument' || shapeType === 'PreDefinedProcess') {\n                    node.height = 30;\n                }\n            }\n            node.offsetX = offsetx;\n            node.offsetY = offsety;\n\n            if (!(node.shape.type === 'Text')) {\n                node.annotations[0].verticalAlignment = 'Top';\n                node.annotations[0].offset = { y: 1 };\n                node.annotations[0].margin = { top: 10 };\n\n                offsetx = offsetx + 90;\n                if (count % 10 === 0) {\n                    offsety = offsety + 100;\n                    offsetx = 60;\n                }\n                count++;\n            }\n            if (node.shape.type === 'Text') {\n                offsetx = 60;\n                offsety = offsety + 50;\n                count = 1;\n                node.width = 150;\n                node.height = 50;\n                node.offsetX = 90;\n                if (!((node.shape as TextModel).content === 'Basic Shapes')) {\n                    node.offsetX = 90;\n                    node.offsetY = offsety + 50;\n                    offsety = offsety + 100;\n                }\n            }\n        }\n        return nodes1;\n    }\n\n    public diagramCreate(args: Object): void {\n        this.diagram.fitToPage({ mode: 'Width' });\n    }\n}\n","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n\n<div class=\"control-section diagram-shapes\" style=\"width:100%\">\n    <ejs-diagram #diagram id=\"diagram\" width=\"100%\" height=\"800px\" [nodes]='nodes' [snapSettings]='snapSettings'\n        (created)='diagramCreate($event)'>\n    </ejs-diagram>\n</div>","app.component.css":".control-fluid {\n    padding: 0px !important;\n}","dependencies.json":"{\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-angular-popups\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-angular-charts\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"@syncfusion/ej2-angular-diagrams\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-grids\":\"*\",\"@syncfusion/ej2-angular-grids\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-angular-lists\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-angular-calendars\":\"*\",\"@syncfusion/ej2-circulargauge\":\"*\",\"@syncfusion/ej2-angular-circulargauge\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-splitbuttons\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\"}"}