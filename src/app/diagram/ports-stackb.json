{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component'; \n\nimport { environment } from './environments/environment'; \n\nimport { enableProdMode } from '@angular/core'; \n\nif (environment.production) { enableProdMode(); } \n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","polyfills.ts":"import 'zone.js';","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n  <link href=\"../../styles/material.css\" rel=\"stylesheet\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\"/>\n</head>\n<body class=\"ej2-new\"> \n\n            <!-- Google Tag Manager (noscript) -->\n            <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n            <!-- End Google Tag Manager (noscript) -->\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app.component.ts":"import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpModule } from '@angular/http';\nimport { ButtonModule, CheckBoxModule, RadioButtonModule } from '@syncfusion/ej2-angular-buttons';\nimport { DropDownButtonModule } from '@syncfusion/ej2-angular-splitbuttons';\nimport { NumericTextBoxModule, ColorPickerModule, UploaderModule, TextBoxModule } from '@syncfusion/ej2-angular-inputs';\nimport { ToolbarModule } from '@syncfusion/ej2-angular-navigations';\nimport { ComboBoxAllModule } from '@syncfusion/ej2-angular-dropdowns';\nimport { SplitButtonModule } from '@syncfusion/ej2-angular-splitbuttons';\nimport { MultiSelectModule } from '@syncfusion/ej2-angular-dropdowns';\nimport { DropDownListAllModule } from '@syncfusion/ej2-angular-dropdowns';\nimport { CircularGaugeModule } from '@syncfusion/ej2-angular-circulargauge';\nimport { DateRangePickerModule } from '@syncfusion/ej2-angular-calendars';\nimport { ListViewAllModule } from '@syncfusion/ej2-angular-lists';\nimport { GridAllModule } from '@syncfusion/ej2-angular-grids';\nimport { TreeViewModule  } from '@syncfusion/ej2-angular-navigations';\nimport { DiagramAllModule, SymbolPaletteAllModule, OverviewAllModule } from '@syncfusion/ej2-angular-diagrams';\nimport { AccumulationAnnotationService, AccumulationDataLabelService, AccumulationLegendService, AccumulationTooltipService, ChartAllModule } from '@syncfusion/ej2-angular-charts';\nimport { AccumulationChartModule } from '@syncfusion/ej2-angular-charts';\nimport { DialogAllModule } from '@syncfusion/ej2-angular-popups';\nimport { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport {\n  DiagramComponent, ConnectorModel, SnapSettingsModel, SnapConstraints,\n  NodeModel, BasicShapeModel, PortVisibility, PointPortModel,\n  PortShapes, ISelectionChangeEventArgs, Node\n} from '@syncfusion/ej2-angular-diagrams';\nimport {\n  DropDownListComponent, MultiSelectComponent, MultiSelect, MultiSelectChangeEventArgs, ChangeEventArgs as DropDownChangeEventArgs,\n  ChangeEventArgs,\n  CheckBoxSelection\n} from '@syncfusion/ej2-angular-dropdowns';\nimport {\n  ColorPickerComponent, NumericTextBoxComponent,\n  ChangeEventArgs as NumericChangeEventArgs, ColorPickerEventArgs\n} from '@syncfusion/ej2-angular-inputs';\nMultiSelect.Inject(CheckBoxSelection);\n\n/**\n * Sample for Ports\n */\n@Component({\n    standalone: true,\n    imports: [ DiagramAllModule, ChartAllModule, GridAllModule, SymbolPaletteAllModule, OverviewAllModule, ButtonModule,       ColorPickerModule, DateRangePickerModule, CheckBoxModule, AccumulationChartModule, ToolbarModule, DropDownButtonModule, UploaderModule, CircularGaugeModule, DropDownListAllModule, ListViewAllModule,       DialogAllModule, TextBoxModule, RadioButtonModule, ComboBoxAllModule, SplitButtonModule,       MultiSelectModule, NumericTextBoxModule, TreeViewModule ],\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.css'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class AppComponent {\n  @ViewChild('diagram') public diagram: DiagramComponent;\n\n  @ViewChild('portVisibilityDrop')\n  public portVisibilityDrop: DropDownListComponent;\n  @ViewChild('portFillDrop') public portFillDrop: ColorPickerComponent;\n  @ViewChild('portBorderDrop') public portBorderDrop: ColorPickerComponent;\n  @ViewChild('portShapeDrop') public portShapeDrop: DropDownListComponent;\n  @ViewChild('portSizeNum') public portSizeNum: NumericTextBoxComponent;\n  @ViewChild('portWidthNum') public portWidthNum: NumericTextBoxComponent;\n\n  public snapSettings: SnapSettingsModel = {\n    constraints: SnapConstraints.None\n  };\n  public rectangleShape: BasicShapeModel = {\n    type: 'Basic',\n    shape: 'Rectangle'\n  };\n  public diamondShape: BasicShapeModel = { type: 'Basic', shape: 'Diamond' };\n\n  public node1Port: CustomPort[] = [\n    {\n      id: 'port1',\n      shape: 'Circle',\n      offset: { x: 0, y: 0.5 },\n      text: 'In - 1'\n    },\n    {\n      id: 'port2',\n      shape: 'Circle',\n      offset: { x: 1, y: 0.5 },\n      text: 'OUT - 1'\n    },\n    {\n      id: 'port3',\n      shape: 'Circle',\n      offset: { x: 0.25, y: 1 },\n      text: 'In - 2'\n    },\n    {\n      id: 'port4',\n      shape: 'Circle',\n      offset: { x: 0.5, y: 1 },\n      text: 'OUT - 2'\n    },\n    {\n      id: 'port5',\n      shape: 'Circle',\n      offset: { x: 0.75, y: 1 },\n      text: 'In - 3'\n    }\n  ];\n\n  public node2Port: CustomPort[] = [\n    {\n      id: 'port6',\n      shape: 'Circle',\n      offset: { x: 0, y: 0.5 },\n      text: 'In - 1'\n    },\n    {\n      id: 'port7',\n      shape: 'Circle',\n      offset: { x: 1, y: 0.35 },\n      text: 'OUT - 1'\n    },\n    {\n      id: 'port8',\n      shape: 'Circle',\n      offset: { x: 1, y: 0.7 },\n      text: 'In - 2'\n    },\n    {\n      id: 'port9',\n      shape: 'Circle',\n      offset: { x: 0.5, y: 1 },\n      text: 'OUT - 2'\n    }\n  ];\n\n  public node3Port: CustomPort[] = [\n    {\n      id: 'port10',\n      shape: 'Circle',\n      offset: { x: 0, y: 0.5 },\n      text: 'Out - 1'\n    },\n    {\n      id: 'port11',\n      shape: 'Circle',\n      offset: { x: 0.5, y: 0 },\n      text: 'In - 1'\n    },\n    {\n      id: 'port12',\n      shape: 'Circle',\n      offset: { x: 0.5, y: 1 },\n      text: 'OUT - 2'\n    }\n  ];\n\n  public node4Port: CustomPort[] = [\n    {\n      id: 'port13',\n      shape: 'Circle',\n      offset: { x: 0, y: 0.5 },\n      text: 'In - 1'\n    },\n    {\n      id: 'port14',\n      shape: 'Circle',\n      offset: { x: 0.5, y: 0 },\n      text: 'In - 2'\n    },\n    {\n      id: 'port15',\n      shape: 'Circle',\n      offset: { x: 0.5, y: 1 },\n      text: 'OUT - 1'\n    }\n  ];\n\n  public node5Port: CustomPort[] = [\n    {\n      id: 'port16',\n      shape: 'Circle',\n      offset: { x: 0, y: 0.5 },\n      text: 'out - 1'\n    },\n    {\n      id: 'port17',\n      shape: 'Circle',\n      offset: { x: 0.5, y: 0 },\n      text: 'In - 1'\n    },\n    {\n      id: 'port18',\n      shape: 'Circle',\n      offset: { x: 1, y: 0.5 },\n      text: 'OUT - 2'\n    }\n  ];\n\n  public node6Port: CustomPort[] = [\n    {\n      id: 'port19',\n      shape: 'Circle',\n      offset: { x: 0, y: 0.35 },\n      text: 'In - 1'\n    },\n    {\n      id: 'port20',\n      shape: 'Circle',\n      offset: { x: 0.5, y: 1 },\n      text: 'Out - 1'\n    }\n  ];\n\n  public node7Port: CustomPort[] = [\n    {\n      id: 'port21',\n      shape: 'Circle',\n      offset: { x: 0.5, y: 0 },\n      text: 'In - 1'\n    },\n    {\n      id: 'port22',\n      shape: 'Circle',\n      offset: { x: 0.5, y: 1 },\n      text: 'Out - 1'\n    }\n  ];\n\n  public nodeDefaults(node: NodeModel): NodeModel {\n    let obj: NodeModel = {};\n    //sets height and width for nodes\n    obj.height = 65;\n    obj.width = 100;\n    obj.style = { fill: '#ebf8fb', strokeColor: '#baeaf5' };\n    for (let i: number = 0; i < node.ports.length; i++) {\n      //sets styles for the ports\n      node.ports[i].style = {\n        fill: '#366f8c',\n        strokeColor: '#366f8c'\n      };\n      node.ports[i].width = 6;\n      node.ports[i].height = 6;\n      node.ports[i].visibility = PortVisibility.Visible;\n    }\n    node.annotations[0].style = {\n      fontSize: 13,\n      color: 'black'\n    };\n    return obj;\n  }\n\n  public connDefaults(connector: ConnectorModel): void {\n    //defines type of the connectors\n    connector.type = 'Orthogonal';\n    connector.style = { strokeColor: '#8cdcef', strokeWidth: 1 };\n    connector.targetDecorator = {\n      width: 5,\n      height: 5,\n      style: { fill: '#8cdcef', strokeColor: '#8cdcef' }\n    };\n  }\n\n  public fields: object = { value: 'value', text: 'text' };\n\n  public visibility: { [key: string]: Object }[] = [\n    { value: PortVisibility.Visible, text: 'Visible' },\n    { value: PortVisibility.Hidden, text: 'Hidden' },\n    { value: PortVisibility.Hover, text: 'Hover' },\n    { value: PortVisibility.Connect, text: 'Connect' }\n  ];\n\n  public shape: { [key: string]: Object }[] = [\n    { value: 'X', text: 'X' },\n    { value: 'Circle', text: 'Circle' },\n    { value: 'Square', text: 'Square' },\n    { value: 'Custom', text: 'Custom' }\n  ];\n\n  public getPort(): PointPortModel[] {\n    let node: NodeModel = this.diagram.selectedItems.nodes[0];\n    let port: PointPortModel[];\n    if (node) {\n      port = node.ports;\n    }\n    return port;\n  }\n  public selectChange(args: ISelectionChangeEventArgs): void {\n    let appearance: HTMLElement = document.getElementById('propertypanel');\n    if (args.state === 'Changed') {\n      if (args.newValue) {\n        // custom code start\n        if (!appearance.classList.contains('e-remove-selection')) {\n          appearance.classList.add('e-remove-selection');\n        }\n        // custom code end\n        if (args.newValue[0] instanceof Node && appearance) {\n          appearance.classList.remove('e-remove-selection');\n          let port: PointPortModel = this.getPort()[0];\n          this.portVisibilityDrop.value = port.visibility;\n          this.portVisibilityDrop.dataBind();\n          this.portFillDrop.value = port.style.fill;\n          this.portFillDrop.dataBind();\n          this.portBorderDrop.value = port.style.strokeColor;\n          this.portBorderDrop.dataBind();\n          this.portShapeDrop.value = port.shape;\n          this.portShapeDrop.dataBind();\n          this.portSizeNum.value = port.height;\n          this.portSizeNum.dataBind();\n          this.portWidthNum.value = port.style.strokeWidth;\n          this.portWidthNum.dataBind();\n        }\n      }\n    }\n  }\n\n  public diagramCreate(args: Object): void {\n    this.diagram.select([this.diagram.nodes[0]]);\n    this.diagram.fitToPage();\n  }\n\n  public portDropOnChange(args: ChangeEventArgs): void {\n    let propertyPanel: HTMLElement = document.getElementById('propertyPanel');\n    if (args.element) {\n      propertyPanel.classList.add('disable-port-custom');\n    }\n  }\n\n  private applyPortStyle(propertyName: string, propertyValue: Object): void {\n    let ports: PointPortModel[] = this.getPort();\n    for (let j: number = 0; j < ports.length; j++) {\n      let port: PointPortModel = ports[j];\n      if (propertyName === 'fill') {\n        port.style.fill = propertyValue.toString();\n      } else if (propertyName === 'strokecolor') {\n        port.style.strokeColor = propertyValue.toString();\n      } else if (propertyName === 'size') {\n        port.width = port.height = Number(propertyValue);\n      } else if (propertyName === 'strokewidth') {\n        port.style.strokeWidth = Number(propertyValue);\n      } else if (propertyName === 'visibility') {\n        port.visibility = this.portVisibilityDrop.value as PortVisibility;\n      } else if (propertyName === 'shape') {\n        port.shape = propertyValue as PortShapes;\n        if(port.shape === 'Custom') {\n          port.pathData = 'M6.805,0L13.61,10.703L0,10.703z';\n        }\n      }\n      this.diagram.dataBind();\n    }\n  }\n\n  public onFillColorChange(args: ColorPickerEventArgs): void {\n    this.applyPortStyle('fill', args.currentValue.rgba);\n  }\n  public onBorderChange(args: ColorPickerEventArgs): void {\n    this.applyPortStyle('strokecolor', args.currentValue.rgba);\n  }\n  public onSizeChange(args: NumericChangeEventArgs): void {\n    if (args.event) {\n      this.applyPortStyle('size', args.value);\n    }\n  }\n  public onBorderWidthChange(args: NumericChangeEventArgs): void {\n    if (args.event) {\n      this.applyPortStyle('strokewidth', args.value);\n    }\n  }\n\n  public portVisibilityDropOnChange(args: MultiSelectChangeEventArgs): void {\n    this.applyPortStyle('visibility', args.value);\n  }\n\n  public portShapeDropOnChange(args: DropDownChangeEventArgs): void {\n    this.applyPortStyle('shape', args.value);\n  }\n}\nexport interface CustomPort extends PointPortModel {\n  text: string;\n}\n","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<style>\n    .diagram-ports .sb-child-row {\n        margin-top: 8px;\n    }\n\n    .diagram-ports .property-panel-header {\n        padding-top: 15px;\n        padding-bottom: 15px;\n    }\n\n    .diagram-ports .property-section .e-remove-selection {\n        cursor: not-allowed;\n    }\n\n    .diagram-ports .row-header {\n        font-size: 13px;\n        font-weight: 500;\n        padding-left: 10px\n    }\n\n    .diagram-ports .e-remove-selection .property-section-content {\n        pointer-events: none;\n    }\n</style>\n\n<div class=\"control-section diagram-ports\">\n    <div class=\"col-lg-8\">\n        <div class=\"content-wrapper\">\n            <ejs-diagram #diagram id=\"diagram\" width=\"100%\" height=\"580px\" [getNodeDefaults]=nodeDefaults [snapSettings]=snapSettings\n                [getConnectorDefaults]=connDefaults (selectionChange)=\"selectChange($event)\" (created)=\"diagramCreate($event)\">\n                <e-nodes>\n                    <e-node id='node1' [height]=65 [width]=100 [offsetX]=220 [offsetY]=100 [shape]='rectangleShape' [ports]=\"node1Port\">\n                        <e-node-annotations>\n                            <e-node-annotation content='Publisher'>\n                            </e-node-annotation>\n                        </e-node-annotations>\n                    </e-node>\n                    <e-node id='node2' [height]=65 [width]=100 [offsetX]=390 [offsetY]=100 [shape]='rectangleShape' [ports]=\"node2Port\">\n                        <e-node-annotations>\n                            <e-node-annotation content='Completed Book'>\n                            </e-node-annotation>\n                        </e-node-annotations>\n                    </e-node>\n                    <e-node id='node3' [height]=65 [width]=100 [offsetX]=390 [offsetY]=200 [shape]='diamondShape' [ports]=\"node3Port\">\n                        <e-node-annotations>\n                            <e-node-annotation content='1st Review'>\n                            </e-node-annotation>\n                        </e-node-annotations>\n                    </e-node>\n                    <e-node id='node4' [height]=65 [width]=100 [offsetX]=390 [offsetY]=300 [shape]='rectangleShape' [ports]=\"node4Port\">\n                        <e-node-annotations>\n                            <e-node-annotation content='Legal Terms'>\n                            </e-node-annotation>\n                        </e-node-annotations>\n                    </e-node>\n                    <e-node id='node5' [height]=65 [width]=100 [offsetX]=390 [offsetY]=400 [shape]='diamondShape' [ports]=\"node5Port\">\n                        <e-node-annotations>\n                            <e-node-annotation content='2nd Review'>\n                            </e-node-annotation>\n                        </e-node-annotations>\n                    </e-node>\n                    <e-node id='node6' [height]=65 [width]=100 [offsetX]=560 [offsetY]=100 [shape]='rectangleShape' [ports]=\"node6Port\">\n                        <e-node-annotations>\n                            <e-node-annotation content='Board'>\n                            </e-node-annotation>\n                        </e-node-annotations>\n                    </e-node>\n                    <e-node id='node7' [height]=65 [width]=100 [offsetX]=560 [offsetY]=200 [shape]='diamondShape' [ports]=\"node7Port\">\n                        <e-node-annotations>\n                            <e-node-annotation content='Approval'>\n                            </e-node-annotation>\n                        </e-node-annotations>\n                    </e-node>\n                </e-nodes>\n                <e-connectors>\n                    <e-connector id='connector1' sourceID='node1' sourcePortID='port2' targetID='node2' targetPortID='port6'>\n                    </e-connector>\n                    <e-connector id='connector2' sourceID='node1' sourcePortID='port4' targetID='node4' targetPortID='port13'>\n                    </e-connector>\n                    <e-connector id='connector3' sourceID='node2' sourcePortID='port9' targetID='node3' targetPortID='port11'>\n                    </e-connector>\n                    <e-connector id='connector4' sourceID='node2' sourcePortID='port7' targetID='node6' targetPortID='port19'>\n                    </e-connector>\n                    <e-connector id='connector5' sourceID='node3' sourcePortID='port10' targetID='node1' targetPortID='port5'>\n                    </e-connector>\n                    <e-connector id='connector6' sourceID='node3' sourcePortID='port12' targetID='node4' targetPortID='port14'>\n                    </e-connector>\n                    <e-connector id='connector7' sourceID='node4' sourcePortID='port15' targetID='node5' targetPortID='port17'>\n                    </e-connector>\n                    <e-connector id='connector8' sourceID='node5' sourcePortID='port18' targetID='node2' targetPortID='port8'>\n                    </e-connector>\n                    <e-connector id='connector9' sourceID='node5' sourcePortID='port16' targetID='node1' targetPortID='port3'>\n                    </e-connector>\n                    <e-connector id='connector10' sourceID='node6' sourcePortID='port20' targetID='node7' targetPortID='port21'>\n                    </e-connector>\n                    <e-connector id='connector11' sourceID='node7' sourcePortID='port22' targetID='node1' targetPortID='port1'>\n                    </e-connector>\n                </e-connectors>\n            </ejs-diagram>\n        </div>\n    </div>\n    <div class=\"col-lg-4 property-section property-panel-section\">\n        <div class=\"property-panel-header\">\n            Properties\n        </div>\n        <div id=\"propertypanel\" class=\"e-remove-selection\">\n            <div class=\"property-section-content property-panel-content\">\n                <div class=\"row row-header\" style=\"font-size: 13px; padding-top: 10px\">\n                    Port Customization\n                </div>\n                <div class=\"row sb-child-row\">\n                    <div class=\"col-xs-6\">\n                        <div style=\"padding-bottom: 8px\">\n                            Visibility\n                        </div>\n                        <div style=\"margin-top: -5px\">\n                            <ejs-dropdownlist #portVisibilityDrop id='portVisibilityDrop' [dataSource]='visibility' [fields]='fields' value='Visible' (change)=\"portVisibilityDropOnChange($event)\"></ejs-dropdownlist>\n                        </div>\n                    </div>\n                    <div class=\"col-xs-6\">\n                        <div style=\"padding-bottom: 8px\">\n                            Shape\n                        </div>\n                        <div>\n                            <ejs-dropdownlist #portShapeDrop id=\"portShapeDrop\" [dataSource]=\"shape\" [fields]=\"fields\" placeholder='Select a Shape' (change)=\"portShapeDropOnChange($event)\"></ejs-dropdownlist>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"row sb-child-row\">\n                    <div class=\"col-xs-6\">\n                        <div style=\"padding-bottom: 8px\">\n                            Fill Color\n                        </div>\n                        <div style=\"padding-bottom: 8px\">\n                            <input ejs-colorpicker #portFillDrop value='#000' type='color' (change)='onFillColorChange($event)' />\n                        </div>\n                    </div>\n                    <div class=\"col-xs-6\">\n                        <div style=\"padding-bottom: 8px\">\n                            Stroke Color\n                        </div>\n                        <div style=\"padding-bottom: 8px\">\n                            <input ejs-colorpicker #portBorderDrop value='#000' type='color' (change)='onBorderChange($event)' />\n                        </div>\n                    </div>\n                </div>\n                <div class=\"row sb-child-row\">\n                    <div class=\"col-xs-6\">\n                        <div style=\"padding-bottom: 8px\">\n                            Stroke Width\n                        </div>\n                        <div style=\"padding-bottom: 8px\">\n                            <ejs-numerictextbox #portWidthNum id=\"portWidthNum\" value=\"1\" step=\"0.5\" format='###.##' (change)='onBorderWidthChange($event)'></ejs-numerictextbox>\n                        </div>\n                    </div>\n                    <div class=\"col-xs-6\">\n                        <div style=\"padding-bottom: 8px\">\n                            Size\n                        </div>\n                        <div style=\"padding-bottom: 8px\">\n                            <ejs-numerictextbox #portSizeNum id=\"portSizeNum\" value=\"6\" step=\"1\" format='###.##' (change)='onSizeChange($event)'></ejs-numerictextbox>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n","app.component.css":".control-fluid {\n    padding: 0px !important;\n}","dependencies.json":"{\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-angular-popups\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-angular-charts\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"@syncfusion/ej2-angular-diagrams\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-grids\":\"*\",\"@syncfusion/ej2-angular-grids\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-angular-lists\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-angular-calendars\":\"*\",\"@syncfusion/ej2-circulargauge\":\"*\",\"@syncfusion/ej2-angular-circulargauge\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-splitbuttons\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\"}"}