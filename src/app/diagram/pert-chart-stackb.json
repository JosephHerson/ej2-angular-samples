{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","app.component.ts":"import { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { DiagramComponent, DiagramModule } from '@syncfusion/ej2-angular-diagrams';\nimport {\n    Diagram, NodeModel, DataBinding, DiagramElement, StackPanel, VerticalAlignment,\n    SnapConstraints, TextStyleModel, TextElement, HorizontalAlignment, DiagramTools,\n    HierarchicalTree, ComplexHierarchicalTree, ConnectorModel, SnapSettingsModel, randomId\n} from '@syncfusion/ej2-diagrams';\nimport { DataManager } from '@syncfusion/ej2-data';\nimport {pertChartData} from'./overview-data';\n\n\n\nexport interface DataInfo {\n    [key: string]: string;\n}\n\nDiagram.Inject(DataBinding, HierarchicalTree, ComplexHierarchicalTree);\n\n/**\n * Sample for PERT Chart\n */\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None,\n    standalone: true,\n    imports: [ DiagramModule, ]\n})\nexport class AppComponent {\n    @ViewChild('diagram')\n    public diagram: DiagramComponent;\n\n    public data: Object = {\n        id: 'id', parentId: 'Category',\n        dataSource: new DataManager(pertChartData),\n        //binds the external data with node\n        doBinding: (nodeModel: NodeModel, data: object, diagram: Diagram) => {\n            nodeModel.shape = { type: 'Text' };\n        }\n    };\n    public layout: Object = {\n        type: 'ComplexHierarchicalTree', orientation: 'LeftToRight', verticalSpacing: 100, horizontalSpacing: 70\n    };\n\n    public connDefaults(connector: ConnectorModel): ConnectorModel {\n        connector.type = 'Straight';\n        connector.style.strokeColor = '#979797';\n        connector.targetDecorator.width = 10;\n        connector.targetDecorator.height = 10;\n        connector.targetDecorator.style = { fill: '#979797', strokeColor: '#979797' };\n        return connector;\n    };\n\n    public tool: DiagramTools = DiagramTools.ZoomPan;\n    public snapSettings: SnapSettingsModel = { constraints: SnapConstraints.None };\n    public setNodeTemplate: Function = this.nodeTemplate.bind(this);\n\n    private nodeTemplate(node: NodeModel): StackPanel {\n        let table: StackPanel = new StackPanel();\n        table.id = randomId();\n        table.style.fill = '#0069d9';\n        table.orientation = 'Vertical';\n        let nameKey: string = 'id';\n        let stack: StackPanel = new StackPanel();\n        stack.id = randomId();\n        stack.children = [];\n        stack.height = 25;\n        stack.orientation = 'Horizontal';\n        stack.style.fill = 'white';\n        stack.horizontalAlignment = 'Stretch';\n        this.addRows(stack, node);\n        table.children = [this.getTextElement((node.data as DataInfo)[nameKey], 'Stretch', 170, 'Stretch'), stack];\n        (table.children[0].style as TextStyleModel).color = 'white';\n        (table.children[0].style as TextStyleModel).fontSize = 14;\n        return table;\n    };\n\n    private getTextElement(text: string, alignment: HorizontalAlignment, width?: number, valignment?: VerticalAlignment): DiagramElement {\n        let textElement: TextElement = new TextElement();\n        textElement.id = randomId();\n        textElement.content = text;\n        textElement.width = width;\n        textElement.height = 25;\n        textElement.horizontalAlignment = alignment;\n        textElement.verticalAlignment = valignment;\n        textElement.style.strokeWidth = 1;\n        textElement.style.strokeColor = '#b5b5b5';\n        textElement.style.fill = 'transparent';\n        textElement.style.color = '#3c3c3c';\n        textElement.relativeMode = 'Object';\n        return textElement;\n    }\n    public create(args: Object): void {\n        this.diagram.fitToPage();\n    }\n    private addRows(column: StackPanel, node: NodeModel): void {\n        column.children.push(this.getTextElement((node.data as DataInfo).startDate, 'Left', 70));\n        column.children.push(this.getTextElement((node.data as DataInfo).duration, 'Center', 30));\n        column.children.push(this.getTextElement((node.data as DataInfo).endDate, 'Right', 70));\n    }\n\n}\n\n","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<div class=\"col-lg-8 control-section\" style=\"width: 100%;\">\n    <div class=\"content-wrapper\">\n        <ejs-diagram #diagram id=\"diagram\" width=\"100%\" height=\"499px\" [tool]='tool' (created)=\"create($event)\" [layout]='layout'\n            [dataSourceSettings]='data' [getConnectorDefaults]='connDefaults' [snapSettings]='snapSettings' [setNodeTemplate]='setNodeTemplate'>\n        </ejs-diagram>\n    </div>\n</div>","app.component.css":".control-fluid {\n    padding: 0px !important;\n}","dependencies.json":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-diagrams\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\"}"}