{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","app.component.ts":"/**\n * Sample for Keyboard functions\n */\n\nimport { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { BasicShapeModel, DiagramComponent, DiagramModule } from '@syncfusion/ej2-angular-diagrams';\nimport {\n    Diagram, NodeModel, UndoRedo, Node, DataBinding, Keys, KeyModifiers, DiagramContextMenu,\n    DiagramTools, HierarchicalTree, CommandManagerModel, ConnectorModel, LayoutModel, SnapSettingsModel\n} from '@syncfusion/ej2-diagrams';\nimport { SnapConstraints } from '@syncfusion/ej2-diagrams';\nimport { DataManager } from '@syncfusion/ej2-data';\nimport {keyBoardData} from'./overview-data';\n\n\nDiagram.Inject(UndoRedo, DiagramContextMenu, HierarchicalTree, DataBinding);\n\nexport interface DataInfo {\n    [key: string]: string;\n}\n\nlet shape: BasicShapeModel = { type: 'Basic', shape: 'Ellipse', cornerRadius: 10 };\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None,\n    standalone: true,\n    imports: [ DiagramModule, ]\n})\n\nexport class AppComponent {\n    @ViewChild('diagram')\n    public diagram: DiagramComponent;\n\n    public nodeDefaults(node: NodeModel): NodeModel {\n        if (!node.children) {\n            node.width = 70;\n            node.height = 70;\n            node.shape = shape;\n        }\n        return node;\n    };\n    public data: Object = {\n        id: 'id', parentId: 'ancestor', dataSource: new DataManager(keyBoardData),\n        doBinding: (nodeModel: NodeModel, data: DataInfo) => {\n            nodeModel.annotations = [{ content: data.id, style: { color: 'white' } }];\n            nodeModel.style = { strokeColor: 'transparent', fill: data.fill };\n        }\n    };\n    public commandManager: CommandManagerModel = this.getCommandManagerSettings();\n    public tool: DiagramTools = DiagramTools.ZoomPan;\n    public snapSettings: SnapSettingsModel = { constraints: SnapConstraints.None };\n    public layout: LayoutModel = { type: 'HierarchicalTree' };\n\n    //Custom command for Diagraming elements.\n    public getCommandManagerSettings(): CommandManagerModel {   \n    let commandManager: CommandManagerModel = {\n        commands: [{\n            name: 'customGroup',\n            canExecute: (): boolean => {\n                if (this.diagram.selectedItems.nodes.length > 0 || this.diagram.selectedItems.connectors.length > 0) {\n                    return true;\n                }\n                return false;\n            },\n            execute: (): void => {\n                this.diagram.group();\n            },\n            gesture: {\n                key: Keys.G,\n                keyModifiers: KeyModifiers.Control\n            }\n        },\n        {\n            name: 'customUnGroup',\n            canExecute: (): boolean => {\n                if (this.diagram.selectedItems.nodes[0].children) {\n                    return true;\n                }\n                return false;\n            },\n            execute: (): void => {\n                this.diagram.unGroup();\n            },\n            gesture: {\n                key: Keys.U,\n                keyModifiers: KeyModifiers.Control\n            }\n        },\n        {\n            name: 'navigationDown',\n            canExecute: (): boolean => {\n                return true;\n            },\n            execute: (): void => {\n                this.navigateLevels(true);\n            },\n            gesture: { key: Keys.Down },\n        },\n        {\n            name: 'navigationUp',\n            canExecute: (): boolean => {\n                return true;\n            },\n            execute: (): void => {\n                this.navigateLevels(false);\n            },\n            gesture: { key: Keys.Up },\n        },\n        {\n            name: 'navigationLeft',\n            canExecute: (): boolean => {\n                return true;\n            },\n            execute: (): void => {\n                this.navigateToSiblings(true);\n            },\n            gesture: { key: Keys.Right },\n        },\n        {\n            name: 'navigationRight',\n            canExecute: (): boolean => {\n                return true;\n            },\n            execute: (): void => {\n                this.navigateToSiblings(false);\n            },\n            gesture: { key: Keys.Left },\n        }]\n    };\n    return commandManager;\n}\n\n    //Navigation for Child Node or parent Node\n    private navigateLevels(isParent: boolean): void {\n        let node: Node = this.diagram.selectedItems.nodes[0] as Node;\n        if (node) {\n            let connectorId: string = isParent ? node.outEdges[0] : node.inEdges[0];\n            let altNode: NodeModel[] = isParent ? this.getNode(connectorId, false) : this.getNode(connectorId, true);\n            this.selectNode(altNode);\n        }\n    }\n    //Navigate to left or right Sibling Node \n    private navigateToSiblings(isRightSibling: boolean): void {\n        let child: Node = this.diagram.selectedItems.nodes[0] as Node;\n        if (child) {\n            let connectorId: string = child.inEdges[0];\n            let altConnectorId: string = '';\n            let parent: NodeModel[] = this.getNode(connectorId, true);\n            if (parent && parent.length > 0) {\n                for (let i: number = 0; i < (parent[0] as Node).outEdges.length; i++) {\n                    if ((parent[0] as Node).outEdges[i] === connectorId) {\n                        altConnectorId = isRightSibling ? (parent[0] as Node).outEdges[i + 1] : (parent[0] as Node).outEdges[i - 1];\n                    }\n                }\n                let sibling: NodeModel[] = this.getNode(altConnectorId, false);\n                this.selectNode(sibling);\n            }\n        }\n    }\n    //Get node elements\n    private getNode(name: string, isParent: boolean): NodeModel[] {\n        let node: NodeModel[] = [];\n        let connector: ConnectorModel = this.diagram.getObject(name) as ConnectorModel;\n        if (connector) {\n            node.push(this.diagram.getObject(isParent ? (connector.sourceID) : (connector.targetID)) as NodeModel);\n        }\n        return node;\n    }\n    //draw selector.\n    private selectNode(node: NodeModel[]): void {\n        if (node && node.length > 0) {\n            this.diagram.clearSelection();\n            this.diagram.select(node);\n        }\n    }\n}\n","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<style>\n    .diagram-key-board-functions .container-fluid {\n        padding-left: 0px;\n    }\n\n    .property-panel-header {\n        padding-bottom: 0px;\n    }\n\n    .property-panel-content {\n        padding-top: 0px !important;\n    }\n\n    @media (max-width: 550px) {\n        .property-panel-content {\n            padding-top: 0px !important;\n        }\n    }\n</style>\n<div class=\"control-section diagram-key-board-functions\">\n    <div class=\"col-lg-8 control-section\">\n        <div class=\"content-wrapper\">\n            <ejs-diagram #diagram id=\"diagram\" width=\"100%\" height=\"645px\" [getNodeDefaults]='nodeDefaults' [layout]='layout' [dataSourceSettings]='data'\n                [snapSettings]='snapSettings' [commandManager]='commandManager'>\n            </ejs-diagram>\n        </div>\n    </div>\n    <div class=\"col-lg-3 property-section\">\n        <div>\n            <h4 class=\"property-panel-header\">Built-In Commands</h4>\n            <div class=\"property-panel-content\">\n                <table id=\"property1\" style=\"font-size: 12px;\">\n                    <tbody>\n                        <tr>\n                            <td style=\"width:60%;\">\n                                <h5>Command</h5>\n                            </td>\n                            <td style=\"width:40%;\">\n                                <h5>Gesture</h5>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td style=\"width:61%;\">Select All </td>\n                            <td style=\"width:39%;\">Ctrl + A</td>\n                        </tr>\n                        <tr>\n                            <td style=\"width:60%;\">Cut</td>\n                            <td style=\"width:40%;\">Ctrl + X</td>\n                        </tr>\n                        <tr>\n                            <td style=\"width:60%;\">Copy</td>\n                            <td style=\"width:40%;\">Ctrl + C</td>\n                        </tr>\n                        <tr>\n                            <td style=\"width:60%;\">Paste</td>\n                            <td style=\"width:40%;\">Ctrl + V</td>\n                        </tr>\n                        <tr>\n                            <td style=\"width:60%;\">Undo</td>\n                            <td style=\"width:40%;\">Ctrl + Z</td>\n                        </tr>\n                        <tr>\n                            <td style=\"width:60%;\">Redo</td>\n                            <td style=\"width:40%;\">Ctrl + Y</td>\n                        </tr>\n                        <tr>\n                            <td style=\"width:60%;\">Delete</td>\n                            <td style=\"width:40%;\">Delete</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n        <div>\n            <h4 class=\"property-panel-header\">Custom Commands</h4>\n            <div class=\"property-panel-content\">\n                <table id=\"property2\" style=\"font-size: 12px;\">\n                    <tbody>\n                        <tr>\n                            <td style=\"width:60%;\">\n                                <h5>Command</h5>\n                            </td>\n                            <td style=\"width:40%;\">\n                                <h5>Gesture</h5>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td style=\"width:60%;\">Group</td>\n                            <td style=\"width:40%;\">Ctrl + G</td>\n                        </tr>\n                        <tr>\n                            <td style=\"width:60%;\">Ungroup</td>\n                            <td style=\"width:40%;\">Ctrl + U</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n        <div>\n            <h4 class=\"property-panel-header\">Modified Commands</h4>\n            <div class=\"property-panel-content\">\n                <table id=\"property3\" style=\"font-size: 12px;\">\n                    <tbody>\n                        <tr>\n                            <td style=\"width:70%;\">\n                                <h5>Command</h5>\n                            </td>\n                            <td style=\"width:30%;\">\n                                <h5>Gesture</h5>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td style=\"width:60%;\">Navigate to Parent Node </td>\n                            <td style=\"width:40%;\">Up Arrow</td>\n                        </tr>\n                        <tr>\n                            <td style=\"width:60%;\">Navigate to Child Node </td>\n                            <td style=\"width:40%;\">Down Arrow</td>\n                        </tr>\n                        <tr>\n                            <td style=\"width:60%;\">Navigate to Previous Child </td>\n                            <td style=\"width:40%;\">Left Arrow</td>\n                        </tr>\n                        <tr>\n                            <td style=\"width:60%;\">Navigate to Next Child </td>\n                            <td style=\"width:40%;\">Right Arrow</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    \n    </div>\n</div>","app.component.css":".control-fluid {\n    padding: 0px !important;\n}","dependencies.json":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-diagrams\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\"}"}