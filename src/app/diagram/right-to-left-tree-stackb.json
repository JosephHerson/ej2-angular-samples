{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","app.component.ts":"import { Component, ViewEncapsulation } from '@angular/core';\nimport { DataManager } from '@syncfusion/ej2-data';\nimport { Diagram, NodeModel, ConnectorModel, PointPortModel, DiagramTools, DataBinding, HierarchicalTree, SnapConstraints, SnapSettingsModel, ShapeAnnotationModel, DiagramModule } from '@syncfusion/ej2-angular-diagrams';\nimport {artificialIntelligence} from'./overview-data';\n\n\n\nexport interface DataInfo {\n    [key: string]: string;\n}\nDiagram.Inject(DataBinding, HierarchicalTree);\n\n/**\n * Sample for RTL Tree\n */\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None,\n    standalone: true,\n    imports: [ DiagramModule, ]\n})\nexport class AppComponent {\n\n    public tool: DiagramTools = DiagramTools.ZoomPan;\n    public snapSettings: SnapSettingsModel = { constraints: SnapConstraints.None };\n\n    public data: Object = {\n        id: 'Name', parentId: 'Category',\n        dataSource: new DataManager(artificialIntelligence),\n        doBinding: (nodeModel: NodeModel, data: DataInfo, diagram: Diagram) => {\n            let nameKey: string = 'Name';\n            nodeModel.annotations = [{ content: data[nameKey] }];\n        }\n    };\n    public layout: Object = {\n        type: 'HierarchicalTree', orientation: 'RightToLeft',\n        verticalAlignment: 'Center', horizontalAlignment: 'Center', verticalSpacing: 100,\n        horizontalSpacing: -10\n    };\n\n    public getNodeDefaults: Function = this.nodeDefaults.bind(this);\n    public getConnectorDefaults: Function = this.connDefaults.bind(this);\n\n    private nodeDefaults(obj: NodeModel): NodeModel {\n        obj.width = 120;\n        obj.style = { fill: '#034d6d', strokeWidth: 1 };\n        let key: string = 'branch';\n        //Initialize shape\n        if ((obj.data as DataInfo)[key] === 'root') {\n            obj.shape = { type: 'Basic', shape: 'Ellipse' };\n            obj.height = 120;\n        } else {\n            obj.shape = {\n                type: 'Native',\n                content: '<svg width=\"120\" height=\"61\"><g><line x1=\"0\" x2=\"120\" y1=\"60\" y2=\"60\" stroke-width=\"1\" stroke= \"black\"></line>'\n                    + '<rect x=\"0\" y=\"0\" width=\"120\" height=\"60\" fill=\"transparent\" stroke=\"none\"></rect></g></svg>'\n            };\n            obj.style.strokeWidth = 0;\n            obj.height = 60;\n        }\n        //Set ports and annotations\n        obj.ports = this.getPorts((obj.data as DataInfo)[key] === 'root');\n        let annotation: ShapeAnnotationModel = obj.annotations[0];\n        if ((obj.data as DataInfo)[key] !== 'root') {\n            annotation.offset = { y: 1 };\n            annotation.verticalAlignment = 'Bottom';\n            annotation.margin = { bottom: 10 };\n        } else {\n            annotation.style = { color: 'white' };\n        }\n        return obj;\n    };\n\n    public connDefaults(connector: ConnectorModel): ConnectorModel {\n        connector.sourcePortID = 'port1';\n        connector.type = 'Bezier';\n        connector.targetPortID = 'port2';\n        connector.targetDecorator = { shape: 'None' };\n        return connector;\n    };\n\n    private getPorts(root: boolean): PointPortModel[] {\n        let ports: PointPortModel[] = [\n            {\n                id: 'port1', shape: 'Circle', offset: { x: 0, y: 0.5 }, horizontalAlignment: 'Left',\n                verticalAlignment: 'Bottom', margin: { right: -2, bottom: -5.5 }\n            },\n            {\n                id: 'port2', shape: 'Circle', offset: { x: 1, y: 0.99 }, horizontalAlignment: 'Right',\n                verticalAlignment: 'Bottom', margin: { right: -2, bottom: -5.5 }\n            }\n        ];\n        if (!root) {\n            ports[0].offset.y = 1;\n        } else {\n            ports[0].verticalAlignment = 'Center';\n            ports[0].horizontalAlignment = 'Center';\n        }\n        return ports;\n    }\n\n}\n\n","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<div class=\"col-lg-8 control-section\" style=\"width: 100%;\">\n    <div class=\"content-wrapper\">\n        <ejs-diagram #diagram id=\"diagram\" width=\"100%\" height=\"600px\" [tool]=tool [layout]='layout' [snapSettings]='snapSettings'\n            [dataSourceSettings]='data' [getConnectorDefaults]='getConnectorDefaults' [getNodeDefaults]='getNodeDefaults'>\n        </ejs-diagram>\n    </div>\n</div>\n","app.component.css":".control-fluid {\n    padding: 0px !important;\n}","dependencies.json":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-diagrams\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\"}"}