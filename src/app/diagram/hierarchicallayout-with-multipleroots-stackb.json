{"main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/guide/browser-support\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n */\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n * because those flags need to be set before `zone.js` being loaded, and webpack\n * will put import in the top of bundle, so user need to create a separate file\n * in this directory (for example: zone-flags.ts), and put the following flags\n * into that file, and then add the following code before importing zone.js.\n * import './zone-flags';\n *\n * The flags allowed in zone-flags.ts are listed here.\n *\n * The following flags will work for all browsers.\n *\n * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n *\n *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n *  with the following flag, it will bypass `zone.js` patch for IE/Edge\n *\n *  (window as any).__Zone_enable_cross_context_check = true;\n *\n */\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n  <link href=\"../../styles/material.css\" rel=\"stylesheet\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\"/>\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app.component.ts":"/**\n * Sample for Hierarchical layout\n */\n\n import { Component, ViewEncapsulation, ViewChild } from '@angular/core';\n import { DiagramComponent } from '@syncfusion/ej2-angular-diagrams';\n import {\n   Diagram,\n   NodeModel,\n   ConnectorModel,\n   LayoutAnimation,\n   DataBinding,\n   HierarchicalTree,\n   SnapConstraints,\n   SnapSettingsModel,\n   TextModel,\n   LayoutOrientation,\n DiagramTools,\n } from '@syncfusion/ej2-diagrams';\n import { ChangeEventArgs as CheckBoxChangeEventArgs } from '@syncfusion/ej2-buttons';\n import { ChangeEventArgs as NumericChangeEventArgs } from '@syncfusion/ej2-inputs';\n import { DataManager, Query } from '@syncfusion/ej2-data';\n Diagram.Inject(DataBinding, HierarchicalTree, LayoutAnimation);\n \n export interface EmployeeInfo {\n   Name: string;\n }\n \n @Component({\n   selector: 'app-root',\n   templateUrl: 'app.component.html',\n   styleUrls: ['app.component.css'],\n   encapsulation: ViewEncapsulation.None,\n })\n export class AppComponent {\n   @ViewChild('diagram')\n   public diagram: DiagramComponent;\n   public data: object[] = [\n     { id: 1, Label: 'Production Manager' },\n     { id: 2, Label: 'Control Room', parentId: 1 },\n     { id: 3, Label: 'Plant Operator', parentId: 1 },\n     { id: 4, Label: 'Foreman', parentId: 2 },\n     { id: 5, Label: 'Foreman', parentId: 3 },\n     { id: 6, Label: 'Craft Personnel', parentId: 4 },\n     { id: 7, Label: 'Craft Personnel', parentId: 4 },\n     { id: 8, Label: 'Craft Personnel', parentId: 5 },\n     { id: 9, Label: 'Craft Personnel', parentId: 5 },\n     { id: 10, Label: 'Administrative Officer' },\n     { id: 11, Label: 'Security Supervisor', parentId: 10 },\n     { id: 12, Label: 'HR Supervisor', parentId: 10 },\n     { id: 13, Label: 'Reception Supervisor', parentId: 10 },\n     { id: 14, Label: 'Securities', parentId: 11 },\n     { id: 15, Label: 'HR Officer', parentId: 12 },\n     { id: 16, Label: 'Receptionist', parentId: 13 },\n     { id: 17, Label: 'Maintainence Manager' },\n     { id: 18, Label: 'Electrical Supervisor', parentId: 17 },\n     { id: 19, Label: 'Mechanical Supervisor', parentId: 17 },\n     { id: 20, Label: 'Craft Personnel', parentId: 18 },\n     { id: 21, Label: 'Craft Personnel', parentId: 19 },\n   ];\n   public tools = DiagramTools.ZoomPan;\n   public items: DataManager = new DataManager(\n     this.data as JSON[],\n     new Query().take(7)\n   );\n   public dataSourceSettings: Object = {\n     //sets the fields to bind\n     id: 'id',\n     parentId: 'parentId',\n     dataSource: this.items,\n     doBinding: (nodeModel: NodeModel, data: object, diagram: Diagram) => {\n       debugger\n       nodeModel.shape = {\n         type: 'Text',\n         content: (data as any).Label,\n       };\n     },\n   };\n \n   public snapSettings: SnapSettingsModel = {\n     constraints: SnapConstraints.None,\n   };\n \n   public layout: Object = {\n     type: 'HierarchicalTree',\n     verticalSpacing: 30, horizontalSpacing: 40,\n         enableAnimation: true\n   };\n \n   //Defines the default node and connector properties\n   public nodeDefaults(obj: NodeModel): NodeModel {\n     if((obj.data as any).id === 1 || (obj.data as any).id === 10 || (obj.data as any).id === 17){\n       obj.style = { fill: '#1c5b9b', strokeColor: 'none', color: 'white', strokeWidth: 2 };\n       obj.borderColor = '#1c5b9b';\n       obj.backgroundColor = '#1c5b9b';\n    }\n    else if((obj.data as any).id === 2 ||(obj.data as any).id === 3 ||(obj.data as any).id === 11 ||(obj.data as any).id ===12 ||(obj.data as any).id === 13||(obj.data as any).id === 18||(obj.data as any).id === 19) {\n       obj.style = { fill: '#18c1be', strokeColor: '#18c1be', color: 'white', strokeWidth: 2 };\n       obj.borderColor = '#18c1be';\n       obj.backgroundColor = '#18c1be';\n    }\n    else if((obj.data as any).id === 4||(obj.data as any).id === 5 ||(obj.data as any).id === 14 ||(obj.data as any).id === 15||(obj.data as any).id ===16||(obj.data as any).id ===20||(obj.data as any).id ===21) {\n       obj.style = { fill: '#17a573', strokeColor: 'none', color: 'white', strokeWidth: 2 };\n       obj.borderColor = '#17a573';\n       obj.backgroundColor = '#17a573';\n    }\n    else {\n       obj.style = { fill: '#73bb34', strokeColor: 'none', color: 'white', strokeWidth: 2 };\n       obj.borderColor = '#73bb34';\n       obj.backgroundColor = '#73bb34';\n    }\n   obj.width = 75;\n   obj.height =35;\n   (obj.shape as any).margin = { left: 5, right: 5, bottom: 5, top: 5 };\n   return obj;\n   }\n \n   public connDefaults(\n     connector: ConnectorModel,\n     diagram: Diagram\n   ): ConnectorModel {\n     connector.type = 'Orthogonal';\n     return connector;\n   }\n \n }\n ","app/app.module.ts":"import { DialogAllModule } from '@syncfusion/ej2-angular-popups';\n\nimport { AccumulationChartModule } from '@syncfusion/ej2-angular-charts';\n\nimport { AccumulationAnnotationService, AccumulationDataLabelService, AccumulationLegendService, AccumulationTooltipService, ChartAllModule } from '@syncfusion/ej2-angular-charts';\n\nimport { DiagramAllModule, SymbolPaletteAllModule, OverviewAllModule } from '@syncfusion/ej2-angular-diagrams';\n\nimport { TreeViewModule  } from '@syncfusion/ej2-angular-navigations';\n\nimport { GridAllModule } from '@syncfusion/ej2-angular-grids';\n\nimport { ListViewAllModule } from '@syncfusion/ej2-angular-lists';\n\nimport { DateRangePickerModule } from '@syncfusion/ej2-angular-calendars';\n\nimport { CircularGaugeModule } from '@syncfusion/ej2-angular-circulargauge';\n\nimport { DropDownListAllModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { MultiSelectModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { SplitButtonModule } from '@syncfusion/ej2-angular-splitbuttons';\n\nimport { ComboBoxAllModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { ToolbarModule } from '@syncfusion/ej2-angular-navigations';\n\nimport { NumericTextBoxModule, ColorPickerModule, UploaderModule, TextBoxModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { DropDownButtonModule } from '@syncfusion/ej2-angular-splitbuttons';\n\nimport { ButtonModule, CheckBoxModule, RadioButtonModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { HttpModule } from '@angular/http';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { RouterModule } from '@angular/router';\n\nimport { CommonModule } from '@angular/common';\n\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from '../app.component';\n@NgModule({ declarations: [ AppComponent ], imports: [ DiagramAllModule, ChartAllModule, GridAllModule, SymbolPaletteAllModule, OverviewAllModule, ButtonModule,       ColorPickerModule,  DateRangePickerModule, CheckBoxModule, AccumulationChartModule, BrowserModule,ToolbarModule, DropDownButtonModule, UploaderModule, CircularGaugeModule, DropDownListAllModule, ListViewAllModule,       DialogAllModule, TextBoxModule, RadioButtonModule, ComboBoxAllModule, SplitButtonModule,       MultiSelectModule, NumericTextBoxModule, BrowserModule,TreeViewModule ], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"      <div class=\"content-wrapper\" style=\"width: 100%;\">\n        <ejs-diagram\n          #diagram\n          id=\"diagram\"\n          width=\"100%\"\n          height=\"499px\"\n          [getConnectorDefaults]=\"connDefaults\"\n          [getNodeDefaults]=\"nodeDefaults\"\n          [layout]=\"layout\"\n          [dataSourceSettings]=\"dataSourceSettings\"\n          [snapSettings]=\"snapSettings\"\n          [tool]=\"tools\"\n        >\n        </ejs-diagram>\n      </div>","app.component.css":".control-fluid {\n    padding: 0px !important;\n}","dependencies.json":"{\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-angular-popups\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-angular-charts\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"@syncfusion/ej2-angular-diagrams\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-grids\":\"*\",\"@syncfusion/ej2-angular-grids\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-angular-lists\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-angular-calendars\":\"*\",\"@syncfusion/ej2-circulargauge\":\"*\",\"@syncfusion/ej2-angular-circulargauge\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-splitbuttons\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\"}"}