{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","app.component.ts":"import { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { ChangeEventArgs as DropDownChangeEventArgs } from '@syncfusion/ej2-dropdowns';\nimport { ExpandMode } from '@syncfusion/ej2-navigations';\nimport { ChangeEventArgs as CheckBoxChangeEventArgs } from '@syncfusion/ej2-buttons';\nimport { ChangeEventArgs as NumericChangeEventArgs } from '@syncfusion/ej2-inputs';\nimport { Node, Connector, NodeModel, ConnectorModel, SymbolPaletteModule } from '@syncfusion/ej2-angular-diagrams';\nimport { SymbolPalette, SymbolInfo, MarginModel, PaletteModel } from '@syncfusion/ej2-diagrams';\n\nimport { CheckBoxModule } from '@syncfusion/ej2-angular-buttons';\nimport { NumericTextBoxModule } from '@syncfusion/ej2-angular-inputs';\nimport { DropDownListModule } from '@syncfusion/ej2-angular-dropdowns';\n\n\n/**\n * Sample for Symbol Palette\n */\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None,\n    standalone: true,\n    imports: [ SymbolPaletteModule, DropDownListModule, NumericTextBoxModule, CheckBoxModule, ]\n})\nexport class AppComponent {\n    @ViewChild('symbolpalette')\n    public palette: SymbolPalette;\n    public expandOptions: { [key: string]: Object }[] = [\n        { mode: 'Single', text: 'Single' },\n        { mode: 'Multiple', text: 'Multiple' },\n    ];\n    public fields: Object = { text: 'text', value: 'mode' };\n    //SymbolPalette Properties\n    public symbolMargin: MarginModel = { left: 15, right: 15, top: 15, bottom: 15 };\n    public expandMode: ExpandMode = 'Multiple';\n    public enableAnimation: any = true;\n    //Initialize the flowshapes for the symbol palatte\n    private flowshapes: NodeModel[] = [\n        { id: 'Terminator', shape: { type: 'Flow', shape: 'Terminator' } },\n        { id: 'Process', shape: { type: 'Flow', shape: 'Process' } },\n        { id: 'Sort', shape: { type: 'Flow', shape: 'Sort' } },\n        { id: 'Document', shape: { type: 'Flow', shape: 'Document' } },\n        { id: 'PreDefinedProcess', shape: { type: 'Flow', shape: 'PreDefinedProcess' } },\n        { id: 'PaperTap', shape: { type: 'Flow', shape: 'PaperTap' } },\n        { id: 'DirectData', shape: { type: 'Flow', shape: 'DirectData' } },\n        { id: 'SequentialData', shape: { type: 'Flow', shape: 'SequentialData' } }\n    ];\n    private basicShapes: NodeModel[] = [\n        { id: 'Rectangle', shape: { type: 'Basic', shape: 'Rectangle' } },\n        { id: 'Ellipse', shape: { type: 'Basic', shape: 'Ellipse' } },\n        { id: 'Parallelogram', shape: { type: 'Basic', shape: 'Parallelogram' } },\n        { id: 'Triangle', shape: { type: 'Basic', shape: 'Triangle' } },\n        { id: 'Hexagon', shape: { type: 'Basic', shape: 'Hexagon' } },\n        { id: 'Pentagon', shape: { type: 'Basic', shape: 'Pentagon' } },\n        { id: 'Cylinder', shape: { type: 'Basic', shape: 'Cylinder' } },\n        { id: 'Star', shape: { type: 'Basic', shape: 'Star' } }\n    ];\n\n    //Initializes connector symbols for the symbol palette\n    private connectorSymbols: ConnectorModel[] = [\n        {\n            id: 'Link1', type: 'Orthogonal', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 40, y: 40 },\n            targetDecorator: { shape: 'Arrow', style: {strokeColor: '#757575', fill: '#757575'} }, style: { strokeWidth: 2, strokeColor: '#757575' }\n        },\n        {\n            id: 'link3', type: 'Orthogonal', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 40, y: 40 },\n            style: { strokeWidth: 2, strokeColor: '#757575' }, targetDecorator: { shape: 'None' }\n        },\n        {\n            id: 'Link21', type: 'Straight', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 40, y: 40 },\n            targetDecorator: { shape: 'Arrow', style: {strokeColor: '#757575', fill: '#757575'} }, style: { strokeWidth: 2, strokeColor: '#757575' }\n        },\n        {\n            id: 'link23', type: 'Straight', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 40, y: 40 },\n            style: { strokeWidth: 2, strokeColor: '#757575' }, targetDecorator: { shape: 'None' }\n        },\n        {\n            id: 'link33', type: 'Bezier', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 40, y: 40 },\n            style: { strokeWidth: 2, strokeColor: '#757575' }, targetDecorator: { shape: 'None' }\n        }\n    ];\n\n    public palettes: PaletteModel[] = [\n        { id: 'flow', expanded: true, symbols: this.flowshapes, iconCss: 'shapes', title: 'Flow Shapes' },\n        { id: 'basic', expanded: true, symbols: this.basicShapes, iconCss: 'shapes', title: 'Basic Shapes' },\n        { id: 'connectors', expanded: true, symbols: this.connectorSymbols, iconCss: 'shapes', title: 'Connectors' }];\n\n    public getSymbolInfo(symbol: NodeModel): SymbolInfo {\n        return { fit: true };\n    }\n\n    public getSymbolDefaults(symbol: NodeModel): void {\n        if (symbol.id === 'Terminator' || symbol.id === 'Process') {\n            symbol.width = 80;\n            symbol.height = 40;\n        } else if (symbol.id === 'Document' || symbol.id === 'PreDefinedProcess' ||\n            symbol.id === 'PaperTap' || symbol.id === 'DirectData') {\n            symbol.width = 50;\n            symbol.height = 40;\n        }\n        symbol.style = { strokeWidth: 2, strokeColor: '#757575' };\n    }\n\n\n\n    public onExpandChange(args: DropDownChangeEventArgs): void {\n        this.symbolPropertyChange('expandMode', args.value);\n    }\n    public onAnimationChange(args: CheckBoxChangeEventArgs): void {\n        this.symbolPropertyChange('animation', args.checked);\n    }\n\n    public onsizechange(args: NumericChangeEventArgs): void {\n        this.symbolPropertyChange('size', args.value);\n    }\n    public onItemTextChange(args: CheckBoxChangeEventArgs): void {\n        if (args.checked) {\n            this.palette.getSymbolInfo = (symbol: Symbol): SymbolInfo => {\n                if (symbol.text !== undefined) {\n                    return { description: { text: symbol.text, overflow: 'Wrap' } };\n                }\n                return { description: { text: symbol.id } };\n            };\n        } else {\n            this.palette.getSymbolInfo = (symbol: Node | Connector): SymbolInfo => {\n                return { description: { text: '' } };\n            };\n        }\n        this.palette.dataBind();\n    }\n\n    private symbolPropertyChange(propertyName: string, propertyValue: Object): void {\n        switch (propertyName) {\n            case 'expandMode':\n                this.palette.expandMode = propertyValue as ExpandMode;\n                break;\n            case 'animation':\n                this.palette.enableAnimation = propertyValue as boolean;\n                break;\n            case 'size':\n                this.palette.symbolWidth = this.palette.symbolHeight = propertyValue as number;\n                break;\n        }\n        this.palette.dataBind();\n    }\n}\ninterface Symbol extends NodeModel {\n    text?: string;\n}\n","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<style>\n    .diagram-symbol-palette .sb-child-row {\n        margin-top: 8px;\n    }\n\n    .diagram-symbol-palette .row {\n        margin-left: 0px;\n        margin-right: 0px;\n    }\n\n    .diagram-symbol-palette .property-panel-table div {\n        padding-left: 0px;\n    }\n\n    .diagram-symbol-palette .col-xs-6 {\n        padding-left: 0px;\n        padding-right: 0px;\n    }\n</style>\n<div class=\"col-lg-8 control-section\" id=\"palette-space\" style=\"height:100%;\">\n    <div id=\"palette-space\" style=\"width:100%; height:100%;\">\n        <ejs-symbolpalette #symbolpalette id=\"symbolpalette\" [enableAnimation]='enableAnimation' [expandMode]='expandMode' [palettes]='palettes'\n            width=\"100%\" height=\"700px\" [symbolHeight]=60 [symbolWidth]=60 [symbolMargin]='symbolMargin' [getSymbolInfo]='getSymbolInfo'\n            [getNodeDefaults]='getSymbolDefaults'>\n        </ejs-symbolpalette>\n    </div>\n</div>\n<div class=\"col-lg-4 property-section diagram-symbol-palette\">\n    <div class=\"property-panel-header\">\n        Properties\n    </div>\n    <div class=\"row sb-child-row property-panel-content\">\n        <div class=\"row sb-child-row\">\n            <div class=\"col-xs-6\">\n                <span>Expandable:</span>\n            </div>\n            <div class=\"col-xs-6\">\n                <ejs-dropdownlist id=\"expand\" #expand [dataSource]=\"expandOptions\" [fields]=fields index=1 (change)=\"onExpandChange($event)\"></ejs-dropdownlist>\n            </div>\n        </div>\n        <div class=\"row sb-child-row\">\n            <div class=\"col-xs-6\">\n                <span>Symbol Size:</span>\n            </div>\n            <div class=\"col-xs-6\">\n                <ejs-numerictextbox #size id=\"size\" value=\"80\" step=\"5\" format=\"##.##\" min=\"40\" max=\"100\" width=\"120px\" (change)='onsizechange($event)'></ejs-numerictextbox>\n            </div>\n        </div>\n        <div class=\"row sb-child-row\">\n            <div class=\"col-xs-6\">\n                <span>Animation:</span>\n            </div>\n            <div class=\"col-xs-6\">\n                <ejs-checkbox #animation id=\"animation\" [checked]=\"false\" (change)=\"onAnimationChange($event)\"></ejs-checkbox>\n            </div>\n        </div>\n        <div class=\"row sb-child-row\">\n            <div class=\"col-xs-6\">\n                <span>Item Text:</span>\n            </div>\n            <div class=\"col-xs-6\">\n                <ejs-checkbox #itemtext id=\"itemtext\" [checked]=\"false\" (change)=\"onItemTextChange($event)\"></ejs-checkbox>\n            </div>\n        </div>\n    </div>\n</div>","app.component.css":".control-fluid {\n    padding: 0px !important;\n}","dependencies.json":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-notifications\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-diagrams\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\"}"}