{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component'; \n\nimport { environment } from './environments/environment'; \n\nimport { enableProdMode } from '@angular/core'; \n\nif (environment.production) { enableProdMode(); } \n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","polyfills.ts":"import 'zone.js';","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n  <link href=\"../../styles/material.css\" rel=\"stylesheet\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\"/>\n</head>\n<body class=\"ej2-new\"> \n\n            <!-- Google Tag Manager (noscript) -->\n            <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n            <!-- End Google Tag Manager (noscript) -->\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app.component.ts":"import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpModule } from '@angular/http';\nimport { ButtonModule, CheckBoxModule, RadioButtonModule } from '@syncfusion/ej2-angular-buttons';\nimport { DropDownButtonModule } from '@syncfusion/ej2-angular-splitbuttons';\nimport { NumericTextBoxModule, ColorPickerModule, UploaderModule, TextBoxModule } from '@syncfusion/ej2-angular-inputs';\nimport { ToolbarModule } from '@syncfusion/ej2-angular-navigations';\nimport { ComboBoxAllModule } from '@syncfusion/ej2-angular-dropdowns';\nimport { SplitButtonModule } from '@syncfusion/ej2-angular-splitbuttons';\nimport { MultiSelectModule } from '@syncfusion/ej2-angular-dropdowns';\nimport { DropDownListAllModule } from '@syncfusion/ej2-angular-dropdowns';\nimport { CircularGaugeModule } from '@syncfusion/ej2-angular-circulargauge';\nimport { DateRangePickerModule } from '@syncfusion/ej2-angular-calendars';\nimport { ListViewAllModule } from '@syncfusion/ej2-angular-lists';\nimport { GridAllModule } from '@syncfusion/ej2-angular-grids';\nimport { TreeViewModule  } from '@syncfusion/ej2-angular-navigations';\nimport { DiagramAllModule, SymbolPaletteAllModule, OverviewAllModule } from '@syncfusion/ej2-angular-diagrams';\nimport { AccumulationAnnotationService, AccumulationDataLabelService, AccumulationLegendService, AccumulationTooltipService, ChartAllModule } from '@syncfusion/ej2-angular-charts';\nimport { AccumulationChartModule } from '@syncfusion/ej2-angular-charts';\nimport { DialogAllModule } from '@syncfusion/ej2-angular-popups';\nimport { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport {\n  DiagramComponent, NodeModel, ConnectorModel, PortVisibility, UndoRedo, LineRouting,\n  ConnectorBridging, Diagram, SnapConstraints, SnapSettingsModel, DiagramConstraints\n} from '@syncfusion/ej2-angular-diagrams';\nDiagram.Inject(UndoRedo, LineRouting, ConnectorBridging);\n/**\n * Sample for Nodes Component\n */\n\n@Component({\n    standalone: true,\n    imports: [ DiagramAllModule, ChartAllModule, GridAllModule, SymbolPaletteAllModule, OverviewAllModule, ButtonModule,       ColorPickerModule,  DateRangePickerModule, CheckBoxModule, AccumulationChartModule, ToolbarModule, DropDownButtonModule, UploaderModule, CircularGaugeModule, DropDownListAllModule, ListViewAllModule,       DialogAllModule, TextBoxModule, RadioButtonModule, ComboBoxAllModule, SplitButtonModule,       MultiSelectModule, NumericTextBoxModule, TreeViewModule ],\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.css'],\n  encapsulation: ViewEncapsulation.None\n})\n\nexport class AppComponent {\n  @ViewChild('diagram') public diagram: DiagramComponent;\n  public nodes: NodeModel[];\n  public connectors: ConnectorModel[];\n  public constraints: DiagramConstraints;\n  public snapSettings: SnapSettingsModel = { constraints: SnapConstraints.None };\n  public getNodeDefaults(node: NodeModel): NodeModel {\n    node.height = 50;\n    if (node.id === 'decision') {\n      node.height = 70;\n    }\n    node.width = 120;\n    node.style = { strokeColor: 'transparent' };\n    return node;\n  }\n  public getConnectorDefaults(connector: ConnectorModel): ConnectorModel {\n    connector.type = 'Orthogonal';\n    connector.style = { strokeColor: '#707070 ', strokeWidth: 1.25 };\n    connector.targetDecorator = { style: { fill: '#707070 ', strokeColor: '#707070 ' } };\n    return connector;\n  }\n  public create(args: Object): void {\n    this.diagram.fitToPage();\n  }\n  ngOnInit(): void {\n    this.constraints = DiagramConstraints.Default | (DiagramConstraints.Bridging | DiagramConstraints.LineRouting);\n    this.nodes = [\n      {\n        id: 'start', offsetX: 115, offsetY: 110, shape: { type: 'Flow', shape: 'Terminator' },\n        ports: [{ id: 'port1', offset: { x: 0.5, y: 0 }, visibility: PortVisibility.Hidden }],\n        style: { fill: '#D5535D' }, annotations: [{ content: 'Start', style: { color: 'white' } }]\n      },\n      {\n        id: 'process', offsetX: 115, offsetY: 255, shape: { type: 'Flow', shape: 'Process' },\n        style: { fill: '#65B091' }, annotations: [{ content: 'Process', style: { color: 'white' } }]\n      },\n      {\n        id: 'document', offsetX: 115, offsetY: 400, shape: { type: 'Flow', shape: 'Document' },\n        ports: [{ id: 'port1', offset: { x: 0, y: 0.5 }, visibility: PortVisibility.Hidden }],\n        annotations: [{ content: 'Document', style: { color: 'white' } }], style: { fill: '#5BA5F0' }\n      },\n      {\n        id: 'decision', offsetX: 390, offsetY: 110, shape: { type: 'Flow', shape: 'Decision' },\n        style: { fill: '#9A8AF7' }, annotations: [{ content: 'Decision', style: { color: 'white' } }]\n      },\n      {\n        id: 'document2', offsetX: 390, offsetY: 255, shape: { type: 'Flow', shape: 'Document' },\n        style: { fill: '#5BA5F0' }, annotations: [{ content: 'Document', style: { color: 'white' } }]\n      },\n      {\n        id: 'end', offsetX: 390, offsetY: 400, shape: { type: 'Flow', shape: 'Terminator' },\n        style: { fill: '#D5535D' }, annotations: [{ content: 'End', style: { color: 'white' } }]\n      },\n      {\n        id: 'process2', offsetX: 640, offsetY: 110, shape: { type: 'Flow', shape: 'Process' },\n        style: { fill: '#65B091' }, annotations: [{ content: 'Process', style: { color: 'white' } }]\n      },\n      {\n        id: 'card', offsetX: 640, offsetY: 255,\n        shape: { type: 'Flow', shape: 'Card' },\n        style: { fill: '#76C3F0' },\n        annotations: [{ content: 'Card', style: { color: 'white' } }],\n        ports: [\n          { id: 'port1', offset: { x: 1, y: 0.5 }, visibility: PortVisibility.Hidden },\n          { id: 'port2', offset: { x: 0.5, y: 1 }, visibility: PortVisibility.Hidden }\n        ],\n      }\n    ];\n    this.connectors = [\n      { id: 'Connector1', sourceID: 'start', targetID: 'process', },\n      { id: 'Connector2', sourceID: 'process', targetID: 'document' },\n      { id: 'Connector3', sourceID: 'document', targetID: 'end' },\n      { id: 'Connector4', sourceID: 'start', targetID: 'decision' },\n      { id: 'Connector5', sourceID: 'decision', targetID: 'process2' },\n      { id: 'Connector6', sourceID: 'process2', targetID: 'card' },\n      { id: 'Connector7', sourceID: 'process', targetID: 'document2' },\n      { id: 'Connector8', sourceID: 'document2', targetID: 'card' },\n      { id: 'Connector9', sourceID: 'start', sourcePortID: 'port1', targetID: 'card', targetPortID: 'port1' },\n      { id: 'Connector10', sourceID: 'card', sourcePortID: 'port2', targetID: 'document', targetPortID: 'port1' }\n    ];\n  }\n}\n","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<div class=\"control-section\">\n    <div class=\"col-lg-8 control-section\" style=\"width: 100%;\">\n        <div class=\"content-wrapper\">\n            <ejs-diagram #diagram id=\"diagram\" width=\"100%\" height=\"600\" [nodes]=\"nodes\" [connectors]=\"connectors\"\n                [constraints]=\"constraints\" [snapSettings]='snapSettings' [getConnectorDefaults]='getConnectorDefaults'\n                (created)='create($event)' [getNodeDefaults]='getNodeDefaults'>\n            </ejs-diagram>\n        </div>\n    </div>\n</div>","app.component.css":".control-fluid {\n    padding: 0px !important;\n}","dependencies.json":"{\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-angular-popups\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-angular-charts\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"@syncfusion/ej2-angular-diagrams\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-grids\":\"*\",\"@syncfusion/ej2-angular-grids\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-angular-lists\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-angular-calendars\":\"*\",\"@syncfusion/ej2-circulargauge\":\"*\",\"@syncfusion/ej2-angular-circulargauge\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-splitbuttons\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\"}"}